<?xml version="1.0" encoding="UTF-8"?>
<!--For PDF version (standard)-->
<!-- <?xml-stylesheet href="docbook/xsl/fo/docbook.xsl" type="text/xsl" ?>-->
<!--For PDF version-->
<!-- <?xml-stylesheet href="ONVIF-stylesheets/onvif-specification-fo-us.xsl" type="text/xsl" ?>-->
<!--For online version-->
<?xml-stylesheet href="docbook-css/docbook.xsl" type="text/xsl" ?>
<!--For PDF version - New ONVIF-->
<!--<?xml-stylesheet href="../ONVIFNew-stylesheets/onvif-specification-fo-us.xsl" type="text/xsl" ?>-->
<book xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xhtml="http://www.w3.org/1999/xhtml"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:xml="http://www.w3.org/XML/1998/namespace"
      xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd"
      version="0.1"
      xml:id="ONVIF_Recording_Search_Device_TS">
  <info>
    <orgname>
      <phrase>
        <trademark class="registered">ONVIF</trademark>
      </phrase>
    </orgname>
    <title>Recording Search Device Test Specification</title>
    <subtitle>Version 20.06</subtitle>
    <date>June 2020</date>
    <copyright>
      <year>2020</year>
      <holder>ONVIF, Inc. All rights reserved.</holder>
    </copyright>
    <address>
      <uri>www.onvif.org</uri>
    </address>
    <legalnotice role="notices">
      <para>
        Recipients of this document may copy, distribute, publish, or display this
        document so long as this copyright notice, license and disclaimer are retained with
        all copies of the document. No license is granted to modify this document.
      </para>
      <para>
        THIS DOCUMENT IS PROVIDED "AS IS," AND THE CORPORATION AND ITS MEMBERS AND THEIR
        AFFILIATES, MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
        NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
        NON-INFRINGEMENT, OR TITLE; THAT THE CONTENTS OF THIS DOCUMENT ARE SUITABLE FOR ANY
        PURPOSE; OR THAT THE IMPLEMENTATION OF SUCH CONTENTS WILL NOT INFRINGE ANY PATENTS,
        COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.
      </para>
      <para>
        IN NO EVENT WILL THE CORPORATION OR ITS MEMBERS OR THEIR AFFILIATES BE LIABLE FOR
        ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL, PUNITIVE OR CONSEQUENTIAL DAMAGES,
        ARISING OUT OF OR RELATING TO ANY USE OR DISTRIBUTION OF THIS DOCUMENT, WHETHER OR
        NOT (1) THE CORPORATION, MEMBERS OR THEIR AFFILIATES HAVE BEEN ADVISED OF THE
        POSSIBILITY OF SUCH DAMAGES, OR (2) SUCH DAMAGES WERE REASONABLY FORESEEABLE, AND
        ARISING OUT OF OR RELATING TO ANY USE OR DISTRIBUTION OF THIS DOCUMENT. THE
        FOREGOING DISCLAIMER AND LIMITATION ON LIABILITY DO NOT APPLY TO, INVALIDATE, OR
        LIMIT REPRESENTATIONS AND WARRANTIES MADE BY THE MEMBERS AND THEIR RESPECTIVE
        AFFILIATES TO THE CORPORATION AND OTHER MEMBERS IN CERTAIN WRITTEN POLICIES OF THE
        CORPORATION.
      </para>
    </legalnotice>
    <revhistory>
      <revision>
        <revnumber>12.12</revnumber>
        <date>Dec 20, 2012</date>
        <revdescription>
          <para>
            First version of Recording Search Test Specification
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>13.06</revnumber>
        <date>Jun, 2013</date>
        <revdescription>
          <para>
            The following test was updated:
          </para>
          <para>
            FIND EVENTS – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS INSIDE RECORDING ENDPOINTS
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>13.12</revnumber>
        <date>Dec, 2013</date>
        <revdescription>
          <para>
            The following test was added:
          </para>
          <para>
            GET MEDIA ATTRIBUTES – PTZ MEDIA ATTRIBUTES
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>14.06</revnumber>
        <date>Jun, 2014</date>
        <revdescription>
          <para>
            The following tests were updated with IDs changing:
          </para>
          <para>
            GET RECORDING SEARCH RESULTS AND GET RECORDINGS CONSISTENCY
          </para>
          <para>
            FIND EVENTS – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS OUTSIDE RECORDING ENDPOINTS)
          </para>
          <para>
            GET RECORDING SEARCH RESULTS AND GET RECORDING INFORMATION CONSISTENCY test was added
          </para>
          <para>
            The following Annex was removed:
          </para>
          <para>
            Annex A.3 GetRecordingsResponse.RecordingItem.Tracks and list of Tracks form GetRecordingSearchResultsResponse. ResultList.RecordingInformation.Track consistency
          </para>
          <para>
            The following Annex was added:
          </para>
          <para>
            Annex A.10 Check GetRecordingInformationResponse.RecordingInformation and GetRecordingSearchResultsResponse. ResultList.RecordingInformation consistency
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>14.12</revnumber>
        <date>Dec, 2014</date>
        <revdescription>
          <para>
            The following tests were updated with IDs changing:
          </para>
          <para>
            FIND EVENTS – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS EQUAL TO RECORDING ENDPOINTS)
          </para>
          <para>
            FIND EVENTS – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS OUTSIDE RECORDING ENDPOINTS)
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>18.06</revnumber>
        <date>Jun, 2018</date>
        <revdescription>
          <para>
            Reformatting document using new template
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>18.12</revnumber>
        <date>Sep 28, 2018</date>
        <revdescription>
          <para>
            The following were updated in the scope of #1738:
          </para>
          <para>
            Sequence diagrams were removed.
          </para>
          <para>
            Annex A.10 Keep Alive Timeout Value (new item)
          </para>
          <para>
            SEARCH-2-1-3 GET RECORDING SEARCH RESULTS WITH MINRESULTS (steps 4, 9 were updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-2-1-4 GET RECORDING SEARCH RESULTS WITH MAXRESULTS (steps 4, 9, 14 were updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-2-1-5 GET RECORDING SEARCH RESULTS WITH WAITTIME (steps 3, 8 were updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-2-1-7 FIND RECORDINGS WITH MAXMATCHES (steps 4, 9, 14 were updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-2-1-8 FIND RECORDINGS WITH RECORDING INFORMATION FILTER (ONLY VIDEO) (step 3 was updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-2-1-12 GET RECORDING SEARCH RESULTS AFTER END OF SEARCH (ENDSEARCH COMMAND WAS INVOKED) (step 3 was updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-2-1-13 FIND RECORDINGS WITH RECORDING INFORMATION FILTER (ONLY AUDIO) (step 3 was updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-2-1-14 FIND RECORDINGS WITH RECORDING INFORMATION FILTER (ONLY METADATA) (step 3 was updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-2-1-15 FIND RECORDINGS WITH RECORDING INFORMATION FILTER (VIDEO AND AUDIO) (step 3 was updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-2-1-16 FIND RECORDINGS WITH RECORDING INFORMATION FILTER (VIDEO AND METADATA) (step 3 was updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-2-1-17 GET RECORDING SEARCH RESULTS AND GET RECORDINGS CONSISTENCY (step 5 was updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-2-1-18 GET RECORDING SEARCH RESULTS AND GET RECORDING INFORMATION CONSISTENCY (step 3 was updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-3-1-5 FIND EVENTS (MAXMATCHES = 1) (step 6 was updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-3-1-11 FIND EVENTS – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS INSIDE RECORDING ENDPOINTS) (steps 8, 17 were updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-3-1-13 FIND EVENTS – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS EQUAL TO RECORDING ENDPOINTS) (steps 8, 13 were updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-3-1-14 FIND EVENTS – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS OUTSIDE RECORDING ENDPOINTS) (steps 8, 13 were updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-5-1-1 FIND METADATA – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS EQUAL TO RECORDING ENDPOINTS) (steps 6, 11 were updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-5-1-2 FIND METADATA – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS OUTSIDE RECORDING ENDPOINTS) (steps 6, 11 were updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-5-1-3 FIND METADATA – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS INSIDE RECORDING ENDPOINTS) (steps 6, 11 were updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-5-1-4 FIND METADATA (MAXMATCHES = 1) (step 6 was updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-5-1-5 FIND METADATA (NO RESULTS) (step 6 was updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-6-1-8 FIND PTZ POSITION – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS EQUAL TO RECORDING ENDPOINTS) (steps 6, 11 were updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-6-1-9 FIND PTZ POSITION – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS OUTSIDE RECORDING ENDPOINTS) (steps 6, 11 were updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-6-1-10 FIND PTZ POSITION – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS INSIDE RECORDING ENDPOINTS) (steps 6, 11 were updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-6-1-11 FIND PTZ POSITION (MAXMATCHES = 1) (step 6 was updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-6-1-12 FIND PTZ POSITIONS USING RECORDING INFORMATION FILTER (step 3 was updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-6-1-13 FIND PTZ POSITION – SEARCHING IN A CERTAIN POSITION (steps 6, 11 were updated with new KeepAlive timeout)
          </para>
          <para>
            SEARCH-7-1-1 GET MEDIA ATTRIBUTES – PTZ MEDIA ATTRIBUTES (step 6 was updated with new KeepAlive timeout)
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>18.12</revnumber>
        <date>Dec 21, 2018</date>
        <revdescription>
          <para>
            Switching Hub description in 'Network Configuration for DUT' section was updated according to #1737
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>19.06</revnumber>
        <date>Feb 06, 2019</date>
        <revdescription>
          <para>
            The following test cases were added according to #1626:
          </para>
          <para>
            RECORDINGS SEARCH - KEEP ALIVE
          </para>
          <para>
            RECORDINGS SEARCH EXPIRATION
          </para>
          <para>
            EVENTS SEARCH - KEEP ALIVE
          </para>
          <para>
            EVENTS SEARCH EXPIRATION
          </para>
          <para>
            METADATA SEARCH - KEEP ALIVE
          </para>
          <para>
            METADATA SEARCH EXPIRATION
          </para>
          <para>
            PTZ SEARCH - KEEP ALIVE
          </para>
          <para>
            PTZ SEARCH EXPIRATION
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>19.06</revnumber>
        <date>May 08, 2019</date>
        <revdescription>
          <para>
            The following test cases were updated according to #1627:
          </para>
          <para>
            SEARCH-3-1-11 FIND EVENTS – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS INSIDE RECORDING ENDPOINTS) (steps 17, 18, 32, 33 were added, fail criteria were updated according checks in steps)
          </para>
          <para>
            SEARCH-3-1-13 FIND EVENTS – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS EQUAL TO RECORDING ENDPOINTS) (steps 13, 14 were added, fail criteria were updated according checks in steps)
          </para>
          <para>
            SEARCH-3-1-14 FIND EVENTS – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS OUTSIDE RECORDING ENDPOINTS) (steps 13, 14, 15, 16, 17 were added, fail criteria were updated according checks in steps)
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>20.06</revnumber>
        <date>Dec 18, 2019</date>
        <revdescription>
          <para>
            The following were updated in the scope of #1436:
          </para>
          <para>
            Reformatting document using new template and format.
          </para>
        </revdescription>
      </revision>
    </revhistory>
  </info>
  <chapter xml:id="s.intro">
    <title>Introduction</title>
    <para>
      The goal of the ONVIF test specification set is to make it possible to realize fully interoperable IP physical security implementation from different vendors. The set of ONVIF test specification describes the test cases need to verify the [ONVIF DeviceIO Service Specs] and [ONVIF Conformance] requirements. It also describes the test framework, test setup, pre-requisites, test policies needed for the execution of the described test cases.
    </para>
    <para>
      This ONVIF Recording Search Test Specification acts as a supplementary document to the [ONVIF Network Interface Specs], illustrating test cases need to be executed and passed. Also, this specification acts as an input document to the development of test tool which will be used to test the ONVIF device implementation conformance towards ONVIF standard. This test tool is referred as ONVIF Client hereafter.
    </para>
    <section xml:id="s.intro.scope">
      <title>Scope</title>
      <para>
        This ONVIF Recording Search Test Specification defines and regulates the conformance testing procedure for the ONVIF conformant devices. Conformance testing is meant to be a functional black-box testing. The objective of this specification is to provide the test cases to test individual requirements of ONVIF devices according to ONVIF core services which are defined in [ONVIF Network Interface Specs].
      </para>
      <para>
        The principal intended purposes are:
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>Provide self-assessment tool for implementations.</para>
          </listitem>
          <listitem>
            <para>
              Provide comprehensive test suite coverage for [ONVIF Network Interface Specs].
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        This specification does not address the following:
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              Product use cases and non-functional (performance and regression) testing.
            </para>
          </listitem>
          <listitem>
            <para>
              SOAP Implementation Interoperability test i.e. Web Service Interoperability Basic Profile version 2.0 (WS-I BP 2.0).
            </para>
          </listitem>
          <listitem>
            <para>
              Network protocol implementation Conformance test for HTTP, HTTPS, RTP protocol.
            </para>
          </listitem>
          <listitem>
            <para>
              Wi-Fi Conformance test
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        The set of ONVIF Test Specification will not cover the complete set of requirements as defined in [ONVIF Network Interface Specs]; instead it would cover subset of it. The scope of this specification is to derive all the normative requirements of [ONVIF DeviceIO Service Specs] which are related to ONVIF Device IO Service and some of the optional requirements.
      </para>
      <para>
        This ONVIF Recording Search Test Specification covers ONVIF Recording Search service which is a functional block of [ONVIF Network Interface Specs]. The following sections give a brief overview and scope of each functional block.
      </para>
      <section xml:id="s.intro.scope.capabilities">
        <title>Capabilities</title>
        <para>
          Capabilities test cases are covered for verification to get Recording Search Service capabilities. It means that GetServices and GetServiceCapabilities commands are covered by this test case.
        </para>
      </section>
      <section xml:id="s.intro.scope.recording_search">
        <title>Recording Search</title>
        <para>
          Recording Search covers the test cases needed for the verification of recording search features as mentioned in [ONVIF Network Interface Specs]. Recording Search section defines different recording search scenarios defined by different search options.
        </para>
      </section>
      <section xml:id="s.intro.scope.event_search">
        <title>Event Search</title>
        <para>
          Event Search covers the test cases needed for the verification of event search features as mentioned in [ONVIF Network Interface Specs]. Event Search section defines different event search scenarios defined by different search options.
        </para>
      </section>
      <section xml:id="s.intro.scope.metadata_search">
        <title>Metadata Search</title>
        <para>
          Metadata Search covers the test cases needed for the verification of metadata search features as mentioned in [ONVIF Network Interface Specs]. Metadata Search section defines different metadata search scenarios defined by different search options.
        </para>
      </section>
      <section xml:id="s.intro.scope.ptz_search">
        <title>PTZ Search</title>
        <para>
          PTZ Search covers the test cases needed for the verification of PTZ search features as mentioned in [ONVIF Network Interface Specs]. PTZ Search section defines different PTZ search scenarios defined by different search options.
        </para>
      </section>
    </section>
  </chapter>
  <chapter xml:id="s.docbook">
    <title>Normative references</title>
    <itemizedlist>
      <listitem>
        <para>[ONVIF Conformance] ONVIF Conformance Process Specification:</para>
        <para>
          <link xlink:href="https://www.onvif.org/profiles/conformance/">https://www.onvif.org/profiles/conformance/</link>
        </para>
      </listitem>
      <listitem>
        <para>[ONVIF Profile Policy] ONVIF Profile Policy:</para>
        <para>
          <link xlink:href="https://www.onvif.org/profiles/">https://www.onvif.org/profiles/</link>
        </para>
      </listitem>
      <listitem>
        <para>[ONVIF Network Interface Specs] ONVIF Network Interface Specification documents:</para>
        <para>
          <link xlink:href="https://www.onvif.org/profiles/specifications/">https://www.onvif.org/profiles/specifications/</link>
        </para>
      </listitem>
      <listitem>
        <para>[ONVIF Core Specs] ONVIF Core Specifications:</para>
        <para>
          <link xlink:href="https://www.onvif.org/profiles/specifications/">https://www.onvif.org/profiles/specifications/</link>
        </para>
      </listitem>
      <listitem>
        <para>[ONVIF Recording Search Service Specs] ONVIF Recording Search Specifications:</para>
        <para>
          <link xlink:href="https://www.onvif.org/profiles/specifications/">https://www.onvif.org/profiles/specifications/</link>
        </para>
      </listitem>
      <listitem>
        <para>[ONVIF Base Test] ONVIF Base Device Test Specification:</para>
        <para>
          <link xlink:href="https://www.onvif.org/profiles/conformance/device-test/">https://www.onvif.org/profiles/conformance/device-test/</link>
        </para>
      </listitem>
      <listitem>
        <para>[ISO/IEC Directives, Part 2] ISO/IEC Directives, Part 2, Annex H:</para>
        <para>
          <link xlink:href="http://www.iso.org/directives">http://www.iso.org/directives</link>
        </para>
      </listitem>
      <listitem>
        <para>[ISO 16484-5] ISO 16484-5:2014-09 Annex P:</para>
        <para>
          <link xlink:href="https://www.iso.org/obp/ui/#!iso:std:63753:en">https://www.iso.org/obp/ui/#!iso:std:63753:en</link>
        </para>
      </listitem>
      <listitem>
        <para>[SOAP 1.2, Part 1] W3C SOAP 1.2, Part 1, Messaging Framework:</para>
        <para>
          <link xlink:href="http://www.w3.org/TR/soap12-part1/">http://www.w3.org/TR/soap12-part1/</link>
        </para>
      </listitem>
      <listitem>
        <para>[XML-Schema, Part 1] W3C XML Schema Part 1: Structures Second Edition:</para>
        <para>
          <link xlink:href="http://www.w3.org/TR/xmlschema-1/">http://www.w3.org/TR/xmlschema-1/</link>
        </para>
      </listitem>
      <listitem>
        <para>[XML-Schema, Part 2] W3C XML Schema Part 2: Datatypes Second Edition:</para>
        <para>
          <link xlink:href="http://www.w3.org/TR/xmlschema-2/">http://www.w3.org/TR/xmlschema-2/</link>
        </para>
      </listitem>
      <listitem>
        <para>[WS-Security] "Web Services Security: SOAP Message Security 1.1 (WS-Security 2004)", OASIS Standard, February 2006.:</para>
        <para>
          <link xlink:href="http://www.oasis-open.org/committees/download.php/16790/wss-v1.1-spec-os-SOAPMessageSecurity.pdf">http://www.oasis-open.org/committees/download.php/16790/wss-v1.1-spec-os-SOAPMessageSecurity.pdf</link>
        </para>
      </listitem>
    </itemizedlist>
  </chapter>
  <chapter xml:id="additions">
    <title>Terms and Definitions</title>
    <section xml:id="additions.conventions">
      <title>Conventions</title>
      <para>
        The key words "shall", "shall not", "should", "should not", "may", "need not",
        "can", "cannot" in this specification are to be interpreted as described in [ISO/IEC
        Directives Part 2].
      </para>
    </section>
    <section xml:id="additions.definitions">
      <title>Definitions</title>
      <para>This section defines terms that are specific to the ONVIF Receiver Service and tests. For the list of applicable general terms and definitions, please see [ONVIF Base Test].</para>
      <variablelist>
        <varlistentry>
          <term>Track</term>
          <listitem>
            <para>
              An individual data channel consisting of video, audio, or metadata. This definition is consistent with the definition of track in [RFC 2326].
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Metadata</term>
          <listitem>
            <para>
              All streaming data except video and audio, including video analytics results, PTZ position data and other metadata (such as textual data from POS applications).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Recording</term>
          <listitem>
            <para>
              A container for a set of audio, video and metadata tracks. A recording can hold one or more tracks. A track is viewed as an infinite timeline that holds data at certain times.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section xml:id="additions.abbreviations">
      <title>Abbreviations</title>
      <para>This section describes abbreviations used in this document.</para>
      <variablelist>
        <varlistentry>
          <term>DUT</term>
          <listitem>
            <para>Device Under Test</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>HTTP</term>
          <listitem>
            <para>Hyper Text Transport Protocol</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>RTCP</term>
          <listitem>
            <para>RTP Control Protocol</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>RTSP</term>
          <listitem>
            <para>Real Time Streaming Protocol</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>RTP</term>
          <listitem>
            <para>Real-time Transport Protocol</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SDP</term>
          <listitem>
            <para>Session Description Protocol</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>TCP</term>
          <listitem>
            <para>Transport Control Protocol</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>UTC</term>
          <listitem>
            <para>Coordinated Universal Time</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>UDP</term>
          <listitem>
            <para>User Datagram Protocol</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>URI</term>
          <listitem>
            <para>Uniform Resource Identifier</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>WSDL</term>
          <listitem>
            <para>Web Services Description Language</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>WS-I BP 2.0</term>
          <listitem>
            <para>Web Services Interoperability Basic Profile version 2.0</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>XML</term>
          <listitem>
            <para>eXtensible Markup Language</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </chapter>
  <chapter xml:id="overview">
    <title>Test Overview</title>
    <para>
      This section provides information the test setup procedure and required prerequisites, and the test policies that should be followed for test case execution.
    </para>
    <section xml:id="overview.test_setup">
      <title>Test Setup</title>
      <section xml:id="overview.test_setup.network_configuration">
        <title>Network Configuration for DUT</title>
        <para>
          The generic test configuration for the execution of test cases defined in this document is as shown below (Figure 4.1).
        </para>
        <para>
          Based on the individual test case requirements, some of the entities in the below setup may not be needed for the execution of those corresponding test cases.
        </para>
        <figure>
          <title>Test Configuration for DUT</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="test_network.png"
                         format="PNG"
                         scalefit="0"/>
            </imageobject>
            <textobject>
              <phrase>Test Configuration for DUT</phrase>
            </textobject>
          </mediaobject>
        </figure>
        <para>
          <emphasis role="bold">DUT:</emphasis> ONVIF device to be tested. Hereafter, this is referred to as DUT (Device Under Test).
        </para>
        <para>
          <emphasis role="bold">ONVIF Client (Test Tool):</emphasis> Tests are executed by this system and it controls the behavior of the DUT. It handles both expected and unexpected behavior.
        </para>
        <para>
          <emphasis role="bold">HTTP Proxy:</emphasis> provides facilitation in case of RTP and RTSP tunneling over HTTP.
        </para>
        <para>
          <emphasis role="bold">Wireless Access Point:</emphasis> provides wireless connectivity to the devices that support wireless connection.
        </para>
        <para>
          <emphasis role="bold">DNS Server:</emphasis> provides DNS related information to the connected devices.
        </para>
        <para>
          <emphasis role="bold">DHCP Server:</emphasis> provides IPv4 Address to the connected devices.
        </para>
        <para>
          <emphasis role="bold">NTP Server:</emphasis> provides time synchronization between ONVIF Client and DUT.
        </para>
        <para>
          <emphasis role="bold">Switching Hub:</emphasis> provides network connectivity among all the test equipments in the test environment. All devices should be connected to the Switching Hub.
          When running multiple test instances in parallel on the same network, the Switching Hub should be configured to use filtering in order to avoid multicast traffic being flooded to all ports, because this may affect test stability.
        </para>
        <para>
          <emphasis role="bold">Router:</emphasis> provides router advertisements for IPv6 configuration.
        </para>
      </section>
    </section>
    <section xml:id="overview.prerequisites">
      <title>Prerequisites</title>
      <para>
        The pre-requisites for executing the test cases described in this Test Specification are:
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              The DUT shall be configured with an IPv4 address.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT shall be IP reachable [in the test configuration].
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT shall be able to be discovered by the Test Tool.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT shall be configured with the time, i.e. manual configuration of UTC time and if NTP is supported by the DUT then NTP time shall be synchronized with NTP Server.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT time and Test tool time shall be synchronized with each other either manually or by a common NTP server.
            </para>
          </listitem>
        </orderedlist>
      </para>
    </section>
    <section xml:id="overview.test_policy">
      <title>Test Policy</title>
      <para>
        This section describes the test policies specific to the test case execution of each functional block.
      </para>
      <para>
        The DUT shall adhere to the test policies defined in this section.
      </para>
      <section xml:id="overview.test_policy.capabilities">
        <title>Capabilities</title>
        <para>
          The device under test shall demonstrate recording search service capability both in GetServices and GetServiceCapabilities responses. A DUT that does not display recording search service capability constitutes failure of test procedure.
        </para>
        <para>
          Please refer to <xref linkend="tc.search.capabilities"/> for Capabilities Test Cases.
        </para>
      </section>
      <section xml:id="overview.test_policy.recording_search">
        <title>Recording Search</title>
        <para>
          The DUT shall give the Receiver Service entry point by GetServices command.
        </para>
        <para>
          DUT shall give the Recording Search Service entry point by GetServices command.
        </para>
        <para>
          Please refer to <xref linkend="tc.search.recording_search"/> for Recording Search Test Cases.
        </para>
        <para>
          Please refer to <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for Recording Environment Pre-Requisite.
        </para>
      </section>
      <section xml:id="overview.test_policy.event_search">
        <title>Event Search</title>
        <para>
          Event search test case execution would need the recording with events. So device shall have at least one recording with events. ONVIF Client shall explicitly specify the recording token for them.
        </para>
        <para>
          DUT shall give the Recording Search Service entry point by GetServices command.
        </para>
        <para>
          Please refer to <xref linkend="tc.search.event_search"/> for Event Search Test Cases.
        </para>
        <para>
          Please refer to <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for Recording Environment Pre-Requisite.
        </para>
      </section>
      <section xml:id="overview.test_policy.metadata_search">
        <title>Metadata Search</title>
        <para>
          Metadata search test case execution would need the recording with metadata and metadata search support. So device shall have at least one recording with metadata and device shall support metadata search capability. ONVIF Client shall explicitly specify the recording token for them.
        </para>
        <para>
          DUT shall give the Recording Search Service entry point by GetServices command.
        </para>
        <para>
          Please refer to <xref linkend="tc.search.metadata_search"/> for Metadata Search Test Cases.
        </para>
        <para>
          Please refer to <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for Recording Environment Pre-Requisite.
        </para>
      </section>
      <section xml:id="overview.test_policy.ptz_search">
        <title>Metadata Search</title>
        <para>
          PTZ search test case execution would need the recording with PTZ metadata and PTZ search support. So device shall have at least one recording with PTZ metadata and device shall support PTZ search capability. ONVIF Client shall explicitly specify the recording token for them.
        </para>
        <para>
          DUT shall give the Recording Search Service entry point by GetServices command.
        </para>
        <para>
          Please refer to <xref linkend="tc.search.ptz_search"/> for PTZ Search Test Cases.
        </para>
        <para>
          Please refer to <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for Recording Environment Pre-Requisite.
        </para>
      </section>
      <section xml:id="overview.test_policy.authentication_method_selection">
        <title>Authentication Method Selection as a Testing Framework</title>
        <para>
          According to later version of [ONVIF Network Interface Specs], it requires ONVIF client to support both HTTP digest and WS-UsernameToken functionality as authentication functionality. Therefore, ONVIF Client (ONVIF Device Test Tool in this context) as a testing framework shall properly select authentication method between the two based on the response from DUT toward specific request. The following is the deterministic procedure on which authentication method is to be selected.
        </para>
        <para>
          <emphasis role="bold">Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                ONVIF Client invokes a specific command which is under testing without any user credentials (no WS-UsernameToken, no HTTP digest authentication header).
              </para>
            </listitem>
            <listitem>
              <para>
                If DUT returns correct response, then ONVIF Client determines that DUT does not require any user authentication toward the command according to the configured security policy.
              </para>
            </listitem>
            <listitem>
              <para>
                If DUT returns HTTP 401 Unauthorized error along with WWW-Authentication: Digest header, then ONVIF Client determines that DUT supports HTTP digest authentication. ONVIF Client shall provide with the proper level of user credential to continue the test procedure.
              </para>
            </listitem>
            <listitem>
              <para>
                If the DUT returns SOAP fault (Sender/NotAuthorized) message, then ONVIF Client determines that WS-UsernameToken is supported by DUT. ONVIF Client shall provide with the proper level of user credential to continue the test procedure.
              </para>
            </listitem>
          </orderedlist>
        </para>
      </section>
    </section>
  </chapter>
  <!--Recording Search Test Cases-->
  <chapter xml:id="tc.search">
    <title>Recording Search Test Cases</title>
    <!--Capabilities-->
    <section xml:id="tc.search.capabilities"
             xreflabel="Section 5.1">
      <title>Capabilities</title>
      <!--SEARCH-1-1-1-->
      <section xml:id="tc.SEARCH-1-1-1">
        <title>
          RECORDING SEARCH SERVICE CAPABILITIES
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-1-1-1
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Capability exchange
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetServiceCapabilities (for Recording Search Service)
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Recording Search Service Capabilities of the DUT.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Recording Search Service was received from the DUT.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetServiceCapabilitiesRequest</emphasis> message to retrieve recording search service capabilities of the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetServiceCapabilitiesResponse</emphasis> from the DUT.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send valid <emphasis role="bold">GetServiceCapabilitiesResponse</emphasis>.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--SEARCH-1-1-2-->
      <section xml:id="tc.SEARCH-1-1-2">
        <title>
          GET SERVICES AND GET RECORDING SEARCH SERVICE CAPABILITIES CONSISTENCY
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-1-1-2
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Capability exchange
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetServices, GetServiceCapabilities (for Recording Search Service)
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> devicemgmt.wsdl, search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Services and Recording Search Service Capabilities consistency.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> None.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetServicesRequest</emphasis> message (IncludeCapability = true) to retrieve all services of the DUT with service capabilities.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetServicesResponse</emphasis> message from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetServiceCapabilitiesRequest</emphasis> message to retrieve Recording Search service capabilities of the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetServiceCapabilitiesResponse</emphasis> message from the DUT.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send valid <emphasis role="bold">GetServicesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send valid <emphasis role="bold">GetServiceCapabilitiesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT sent different Capabilities in <emphasis role="bold">GetServicesResponse</emphasis> message and in <emphasis role="bold">GetServiceCapabilitiesResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> Service will be defined as Recording Search service if it will have Namespace element that is equal to "http://www.onvif.org/ver10/search/wsdl".
        </para>
      </section>
    </section>
    <!--Recording Search-->
    <section xml:id="tc.search.recording_search"
             xreflabel="Section 5.2">
      <title>Recording Search</title>
      <!--SEARCH-4-1-1-->
      <section xml:id="tc.SEARCH-4-1-1">
        <title>
          GET RECORDING SUMMARY
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-4-1-1
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> GetRecordingSummary
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetRecordingSummary
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify GetRecordingSummary command.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> None.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingSummaryRequest</emphasis> message to retrieve summary information about recordings on the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingSummaryResponse</emphasis> message from the DUT.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetRecordingSummaryResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT sent <emphasis role="bold">GetRecordingSummaryResponse</emphasis> message with DataUntil less than DataFrom.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--SEARCH-2-1-3-->
      <section xml:id="tc.SEARCH-2-1-3">
        <title>
          GET RECORDING SEARCH RESULTS WITH MINRESULTS
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-2-1-3
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindRecordings, GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindRecordings, GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify that GetRecordingSearchResult command accepts any MinResults.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details).
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Get current number of recordings N1 from the DUT (see <xref linkend="Annex_TotalNumberOfRecordings"/>).
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindRecordingsRequest</emphasis> message (Scope = [empty], no MaxMatches, KeepAlive = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start recording search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindRecordingsResponse</emphasis> message (SearchToken = "Token1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingSearchResultsRequest</emphasis> message (SearchToken = "Token1", MinResults = N1) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], RecordingInformation list which contains current results of the search with at least the following information for each recording on the list: RecordingToken, Source, Content, Track list, RecordingStatus) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 6-7 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindRecordingsRequest</emphasis> message (Scope = [empty], no MaxMatches, KeepAlive = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start recording search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindRecordingsResponse</emphasis> message (SearchToken = "Token1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingSearchResultsRequest</emphasis> message (SearchToken = "Token1", MinResults = N1+1) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], RecordingInformation list which contains current results of the search with at least the following information for each recording on the list: RecordingToken, Source, Content, Track list, RecordingStatus) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 11-12 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that sets of recordings from <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> messages for the first (steps 4-8) and the second (steps 9-13) recording search session are the same.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindRecordingsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned an invalid RecordingInformation.EarliestRecording (e.g. there was no Track for this Recording where Track.DataFrom was equal to RecordingInformation.EarliestRecording or there was at list one Track for this Recording where Track.DataFrom was less than RecordingInformation.EarliestRecording).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned an invalid RecordingInformation.LatestRecording (e.g. there was no Track for this Recording where Track.DataTo was equal to RecordingInformation. LatestRecording or there was at list one Track for this Recording where Track.DataTo was greater than RecordingInformation.LatestRecording).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned a different set of recordings from <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis>'s for steps 7 and 12 (see <xref linkend="Annex_ComparisonOfRecordingSearchResults"/>).
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--SEARCH-2-1-4-->
      <section xml:id="tc.SEARCH-2-1-4">
        <title>
          GET RECORDING SEARCH RESULTS WITH MAXRESULTS
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-2-1-4
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindRecordings, GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindRecordings, GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify that GetRecordingSearchResult command accepts any MaxResults and handles MaxResults parameter correctly.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details).
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Get current number of recordings N1 from the DUT (see <xref linkend="Annex_TotalNumberOfRecordings"/>).
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindRecordingsRequest</emphasis> message (Scope = [empty], no MaxMatches, KeepAlive = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>) to start recording search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindRecordingsResponse</emphasis> message (SearchToken = "Token1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingSearchResultsRequest</emphasis> message (SearchToken = "Token1", MaxResults = 1) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], RecordingInformation list which contains current results of the search with at least the following information for each recording on the list: RecordingToken, Source, Content, Track list, RecordingStatus) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 6-7 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindRecordingsRequest</emphasis> message (Scope = [empty], no MaxMatches, KeepAlive = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start recording search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindRecordingsResponse</emphasis> message (SearchToken = "Token1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingSearchResultsRequest</emphasis> message (SearchToken = "Token1", MaxResults = N1) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], RecordingInformation list which contains current results of the search with at least the following information for each recording on the list: RecordingToken, Source, Content, Track list, RecordingStatus) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 11-12 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindRecordingsRequest</emphasis> message (Scope = [empty], no MaxMatches, KeepAlive = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start recording search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindRecordingsResponse</emphasis> message (SearchToken = "Token1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingSearchResultsRequest</emphasis> message (SearchToken = "Token1", MaxResults = N1+1) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], RecordingInformation list which contains current results of the search with at least the following information for each recording on the list: RecordingToken, Source, Content, Track list, RecordingStatus) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 16-17 until SearchState is equal to Completed.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindRecordingsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned an invalid RecordingInformation.EarliestRecording (e.g. there was no Track for this Recording where Track.DataFrom was equal to RecordingInformation.EarliestRecording or there was at least one Track for this Recording where Track.DataFrom was less than RecordingInformation.EarliestRecording).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned an invalid RecordingInformation.LatestRecording (e.g. there was no Track for this Recording where Track.DataTo was equal to RecordingInformation.LatestRecording or there was at least one Track for this Recording where Track.DataTo was greater than RecordingInformation.LatestRecording).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned more results in <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> than specified in the MaxResults field in <emphasis role="bold">GetRecordingSearchResultsRequest</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--SEARCH-2-1-5-->
      <section xml:id="tc.SEARCH-2-1-5">
        <title>
          GET RECORDING SEARCH RESULTS WITH WAITTIME
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-2-1-5
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindRecordings, GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindRecordings, GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify that GetRecordingSearchResult command accepts and honors any WaitTime.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details).
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindRecordingsRequest</emphasis> message (Scope = [empty], no MaxMatches, KeepAlive = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start recording search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindRecordingsResponse</emphasis> message (SearchToken = "Token1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingSearchResultsRequest</emphasis> message (SearchToken = "Token1", WaitTime = PT0.5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], RecordingInformation list which contains current results of the search with at least the following information for each recording on the list: RecordingToken, Source, Content, Track list, RecordingStatus) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 5-6 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindRecordingsRequest</emphasis> message (Scope = [empty], no MaxMatches, KeepAlive = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start recording search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindRecordingsResponse</emphasis> message (SearchToken = "Token1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingSearchResultsRequest</emphasis> message (SearchToken = "Token1", WaitTime = PT1S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], RecordingInformation list which contains current results of the search with at least the following information for each recording on the list: RecordingToken, Source, Content, Track list, RecordingStatus) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 10-11 until SearchState is equal to Completed.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindRecordingsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message in 1 second after specified WaitTime exceeded.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned an invalid RecordingInformation.EarliestRecording (e.g. there was no Track for this Recording where Track.DataFrom was equal to RecordingInformation.EarliestRecording or there was at least one Track for this Recording where Track.DataFrom was less than RecordingInformation.EarliestRecording).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned an invalid RecordingInformation.LatestRecording (e.g. there was no Track for this Recording where Track.DataTo is equal to RecordingInformation.LatestRecording or there was at least one Track for this Recording where Track.DataTo was greater than RecordingInformation.LatestRecording).
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--SEARCH-2-1-7-->
      <section xml:id="tc.SEARCH-2-1-7">
        <title>
          FIND RECORDINGS WITH MAXMATCHES
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-2-1-7
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindRecordings, GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindRecordings, GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify FindRecordings with specified MaxMatches.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details).
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Get current number of recordings N1 from the DUT (see <xref linkend="Annex_TotalNumberOfRecordings"/>).
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindRecordingsRequest</emphasis> message (Scope = [empty], MaxMatches = 1, KeepAlive = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start recording search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindRecordingsResponse</emphasis> message (SearchToken = "Token1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingSearchResultsRequest</emphasis> message (SearchToken = "Token1") to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], RecordingInformation list) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 6-7 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindRecordingsRequest</emphasis> message (Scope = [empty], MaxMatches = N1 - 1, KeepAlive = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start recording search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindRecordingsResponse</emphasis> message (SearchToken = "Token1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingSearchResultsRequest</emphasis> message (SearchToken = "Token1") to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], RecordingInformation list) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 11-12 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindRecordingsRequest</emphasis> message (Scope = [empty], MaxMatches = N1, KeepAlive = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start recording search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindRecordingsResponse</emphasis> message (SearchToken = "Token1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingSearchResultsRequest</emphasis> message (SearchToken = "Token1") to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], RecordingInformation list) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 16-17 until SearchState is equal to Completed.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindRecordingsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned an invalid RecordingInformation.EarliestRecording (e.g. there was no Track for this Recording where Track.DataFrom was equal to RecordingInformation.EarliestRecording or there was at list one Track for this Recording where Track.DataFrom was less than RecordingInformation.EarliestRecording).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned invalid RecordingInformation.LatestRecording (e.g. there was no Track for this Recording where Track.DataTo was equal to RecordingInformation.LatestRecording or there was at least one Track for this Recording where Track.DataTo was greater than RecordingInformation.LatestRecording).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned total number of Recordings in result greater than specified in MaxMatches for <emphasis role="bold">FindRecordingsRequest</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> Steps 9-18 will be skipped if total number of recordings on the DUT equal to 1. Steps 9-13 will be skipped if total number of recordings on the DUT equal to 2.
        </para>
      </section>
      <!--SEARCH-2-1-8-->
      <section xml:id="tc.SEARCH-2-1-8">
        <title>
          FIND RECORDINGS WITH RECORDING INFORMATION FILTER (ONLY VIDEO)
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-2-1-8
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindRecordings, GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindRecordings, GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify FindRecordings with specified RecordingInformationFilter (filter to fined only recordings with video track).
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording with video track exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details).
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindRecordingsRequest</emphasis> message (Scope.RecordingInformationFilter = "boolean(//Track[TrackType = "Video"])", KeepAlive = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start recording search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindRecordingsResponse</emphasis> message (SearchToken = "Token1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingSearchResultsRequest</emphasis> message (SearchToken = "Token1", MinResults = 1, WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], RecordingInformation list with recordings, that contains track with video) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 6-7 until SearchState is equal to Completed.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindRecordingsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned an invalid RecordingInformation.EarliestRecording (e.g. there was no Track for this Recording where Track.DataFrom was equal to RecordingInformation.EarliestRecording or there was at least one Track for this Recording where Track.DataFrom was less than RecordingInformation.EarliestRecording).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned an invalid RecordingInformation.LatestRecording (e.g. there was no Track for this Recording where Track.DataTo was equal to RecordingInformation.LatestRecording or there was at least one Track for this Recording where Track.DataTo was greater than RecordingInformation.LatestRecording).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned Recordings without Track’s with TrackType equal to "Video".
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--SEARCH-2-1-10-->
      <section xml:id="tc.SEARCH-2-1-10">
        <title>
          GET RECORDING SEARCH RESULTS WITH INVALID SEARCHTOKEN
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-2-1-10
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Recording Search Result with Invalid Search Token.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> None
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingSearchResultsRequest</emphasis> message (invalid SearchToken).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT will generate SOAP 1.2 fault message (InvalidArgVal/InvalidToken).
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send SOAP 1.2 fault message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT sent an incorrect SOAP 1.2 fault message (fault code, namespace, etc.).
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> Other faults than specified in the test are acceptable, though the specified are preferable.
        </para>
      </section>
      <!--SEARCH-2-1-11-->
      <section xml:id="tc.SEARCH-2-1-11">
        <title>
          END SEARCH WITH INVALID SEARCHTOKEN
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-2-1-11
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> EndSearch
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> EndSearch
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify End Search with Invalid Search Token.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> None
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">EndSearchRequest</emphasis> message (invalid SearchToken).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT will generate SOAP 1.2 fault message (InvalidArgVal/InvalidToken).
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send SOAP 1.2 fault message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT sent an incorrect SOAP 1.2 fault message (fault code, namespace, etc.).
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> Other faults than specified in the test are acceptable, though the specified are preferable.
        </para>
      </section>
      <!--SEARCH-2-1-12-->
      <section xml:id="tc.SEARCH-2-1-12">
        <title>
          GET RECORDING SEARCH RESULTS AFTER END OF SEARCH (ENDSEARCH COMMAND WAS INVOKED)
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-2-1-12
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindRecordings, GetRecordingSearchResult, EndSearch
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindRecordings, GetRecordingSearchResult, EndSearch
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify end of Recording Search session after invoking EndSearch command.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details).
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindRecordingsRequest</emphasis> message (Scope = [empty], no MaxMatches, KeepAlive = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)).
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindRecordingsResponse</emphasis> message (SearchToken = "Token1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">EndSearchRequest</emphasis> message (SearchToken = "Token1").
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">EndSearchResponse</emphasis> message from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingSearchResultsRequest</emphasis> message (SearchToken = "Token1").
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT will generate SOAP 1.2 fault message (InvalidArgVal/InvalidToken).
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindRecordingsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">EndSearchResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send SOAP 1.2 fault message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT sent an incorrect SOAP 1.2 fault message (fault code, namespace, etc.).
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> Other faults than specified in the test are acceptable, though the specified are preferable.
        </para>
      </section>
      <!--SEARCH-2-1-13-->
      <section xml:id="tc.SEARCH-2-1-13">
        <title>
          FIND RECORDINGS WITH RECORDING INFORMATION FILTER (ONLY AUDIO)
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-2-1-13
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindRecordings, GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindRecordings, GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify FindRecordings with specified RecordingInformationFilter (filter to find only recordings with audio track).
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> None
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindRecordingsRequest</emphasis> message (Scope.RecordingInformationFilter = "boolean(//Track[TrackType = "Audio"])", KeepAlive = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start recording search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindRecordingsResponse</emphasis> message (SearchToken = "Token1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingSearchResultsRequest</emphasis> message (SearchToken = "Token1", MinResults = 1, WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], RecordingInformation list with recordings, that contains track with audio) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 6-7 until SearchState is equal to Completed.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindRecordingsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned an invalid RecordingInformation.EarliestRecording (e.g. there was no Track for this Recording where Track.DataFrom was equal to RecordingInformation.EarliestRecording or there was at least one Track for this Recording where Track.DataFrom was less than RecordingInformation.EarliestRecording).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned an invalid RecordingInformation.LatestRecording (e.g. there was no Track for this Recording where Track.DataTo was equal to RecordingInformation.LatestRecording or there was at least one Track for this Recording where Track.DataTo was greater than RecordingInformation.LatestRecording).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned Recordings without Track’s with TrackType equal to "Audio".
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return at least one Recording in search results if Audio Recording is supported.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The DUT could return no results if Audio is not supported.
        </para>
      </section>
      <!--SEARCH-2-1-14-->
      <section xml:id="tc.SEARCH-2-1-14">
        <title>
          FIND RECORDINGS WITH RECORDING INFORMATION FILTER (ONLY METADATA)
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-2-1-14
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindRecordings, GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindRecordings, GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify FindRecordings with specified RecordingInformationFilter (filter to find only recordings with metadata track).
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details).
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindRecordingsRequest</emphasis> message (Scope.RecordingInformationFilter = "boolean(//Track[TrackType = "Metadata"])", KeepAlive = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start recording search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindRecordingsResponse</emphasis> message (SearchToken = "Token1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingSearchResultsRequest</emphasis> message (SearchToken = "Token1", MinResults = 1, WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], RecordingInformation list with recordings, that contains track with metadata) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 6-7 until SearchState is equal to Completed.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindRecordingsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned an invalid RecordingInformation.EarliestRecording (e.g. there was no Track for this Recording where Track.DataFrom was equal to RecordingInformation.EarliestRecording or there was at least one Track for this Recording where Track.DataFrom was less than RecordingInformation.EarliestRecording).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned an invalid RecordingInformation.LatestRecording (e.g. there was no Track for this Recording where Track.DataTo was equal to RecordingInformation.LatestRecording or there was at least one Track for this Recording where Track.DataTo was greater than RecordingInformation.LatestRecording).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned Recordings without Track’s with TrackType equal to "Metadata".
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return at least one Recording in search results in case Metadata Recording is supported.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--SEARCH-2-1-15-->
      <section xml:id="tc.SEARCH-2-1-15">
        <title>
          FIND RECORDINGS WITH RECORDING INFORMATION FILTER (VIDEO AND AUDIO)
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-2-1-15
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindRecordings, GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindRecordings, GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify FindRecordings with specified RecordingInformationFilter (filter to find recordings with video and audio track).
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details).
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindRecordingsRequest</emphasis> message (Scope.RecordingInformationFilter = "boolean(//Track[TrackType = "Video"]) and boolean(//Track[TrackType = "Audio"])", KeepAlive = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start recording search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindRecordingsResponse</emphasis> message (SearchToken = "Token1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingSearchResultsRequest</emphasis> message (SearchToken = "Token1", MinResults = 1, WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], RecordingInformation list with recordings, that contains track with video and audio) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 6-7 until SearchState is equal to Completed.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindRecordingsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned an invalid RecordingInformation.EarliestRecording (e.g. there was no Track for this Recording where Track.DataFrom was equal to RecordingInformation.EarliestRecording or there was at least one Track for this Recording where Track.DataFrom was less than RecordingInformation.EarliestRecording).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned an invalid RecordingInformation.LatestRecording (e.g. there was no Track for this Recording where Track.DataTo was equal to RecordingInformation.LatestRecording or there was at least one Track for this Recording where Track.DataTo was greater than RecordingInformation.LatestRecording).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned Recordings without Tracks that have TrackType equal to "Video" and "Audio".
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return at least one Recording in search results if Audio Recording is supported.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The DUT could return no results if Audio is not supported.
        </para>
      </section>
      <!--SEARCH-2-1-16-->
      <section xml:id="tc.SEARCH-2-1-16">
        <title>
          FIND RECORDINGS WITH RECORDING INFORMATION FILTER (VIDEO AND METADATA)
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-2-1-16
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindRecordings, GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindRecordings, GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify FindRecordings with specified RecordingInformationFilter (filter to find recordings with video and metadata track).
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details).
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindRecordingsRequest</emphasis> message (Scope.RecordingInformationFilter = "boolean(//Track[TrackType = "Video"]) and boolean(//Track[TrackType = "Metadata"])", KeepAlive = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start recording search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindRecordingsResponse</emphasis> message (SearchToken = "Token1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingSearchResultsRequest</emphasis> message (SearchToken = "Token1", MinResults = 1, WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], RecordingInformation list with recordings, that contains track with video and metadata) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 6-7 until SearchState is equal to Completed.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindRecordingsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned an invalid RecordingInformation.EarliestRecording (e.g. there was no Track for this Recording where Track.DataFrom was equal to RecordingInformation.EarliestRecording or there was at least one Track for this Recording where Track.DataFrom was less than RecordingInformation.EarliestRecording).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned an invalid RecordingInformation.LatestRecording (e.g. there was no Track for this Recording where Track.DataTo was equal to RecordingInformation.LatestRecording or there was at least one Track for this Recording where Track.DataTo was greater than RecordingInformation.LatestRecording).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned Recordings without Tracks that have TrackType equal to "Video" and "Metadata".
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return at least one Recording in search results if Metadata Recording is Supported.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--SEARCH-2-1-17-->
      <section xml:id="tc.SEARCH-2-1-17">
        <title>
          GET RECORDING SEARCH RESULTS AND GET RECORDINGS CONSISTENCY
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-2-1-17
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindRecordings, GetRecordingSearchResults, GetRecordings
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindRecordings, GetRecordingSearchResult, GetRecordings
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl, recording.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Recording Search Result and Get Recordings consistency.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details).
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingsRequest</emphasis> message to retrieve list of Recordings.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingsResponse</emphasis> message (RecordingItem list) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindRecordingsRequest</emphasis> message (Scope = [empty], no MaxMatches, KeepAlive = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start recording search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindRecordingsResponse</emphasis> message (SearchToken = "Token1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingSearchResultsRequest</emphasis> message (SearchToken = "Token1", MinResults = 1, MaxResults = 1, WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], RecordingInformation list) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 7-8 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that list of Recordings from <emphasis role="bold">GetRecordingsResponse</emphasis> and list of Recordings from <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis>'s are consistent.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetRecordingsResponse</emphasis> message, if <emphasis role="bold">GetRecordingsRequest</emphasis> was invoked.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindRecordingsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned invalid RecordingInformation.EarliestRecording (e.g. there was no Track for this Recording where Track.DataFrom was equal to RecordingInformation.EarliestRecording or there was at least one Track for this Recording where Track.DataFrom was less than RecordingInformation.EarliestRecording) in GetRecordingSearchResultResponse.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned invalid RecordingInformation.LatestRecording (e.g. there was no Track for this Recording where Track.DataTo was equal to RecordingInformation.LatestRecording or there was at least one Track for this Recording where Track.DataTo was greater than RecordingInformation.LatestRecording) in GetRecordingSearchResultResponse.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned list of Recordings from <emphasis role="bold">GetRecordingsResponse</emphasis> and list of recordings from <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis>'s that were inconsistent (see <xref linkend="Annex_ComparisonRecordingList"/>).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned the Recording with the same token twice in one or several <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> messages or in <emphasis role="bold">GetRecordingsResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--SEARCH-2-1-18-->
      <section xml:id="tc.SEARCH-2-1-18">
        <title>
          GET RECORDING SEARCH RESULTS AND GET RECORDING INFORMATION CONSISTENCY
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-2-1-18
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindRecordings, GetRecordingSearchResult, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindRecordings, GetRecordingSearchResults, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Recording Search Result and Get RecordingInformation consistency.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details).
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindRecordingsRequest</emphasis> message (Scope = [empty], no MaxMatches, KeepAlive = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start recording search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindRecordingsResponse</emphasis> message (SearchToken = "Token1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingSearchResultsRequest</emphasis> message (SearchToken = "Token1", MinResults = 1, MaxResults = 1, WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], RecordingInformation list) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 5-6 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingInformationRequest</emphasis> message for the first recording from <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify <emphasis role="bold">GetRecordingInformationResponse</emphasis> message from the DUT. Compare RecordingInformation structure received in GetRecordingSearchResults and in GetRecordingInformation response according <xref linkend="Annex_RecordingInformationConsistencyCheck"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 8-9 for all other recording from <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis>.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindRecordingsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetRecordingInformationResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned invalid RecordingInformation.EarliestRecording (e.g. there was no Track for this Recording where Track.DataFrom was equal to RecordingInformation.EarliestRecording or there was at least one Track for this Recording where Track.DataFrom was less than RecordingInformation.EarliestRecording) in GetRecordingSearchResultResponse.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned invalid RecordingInformation.LatestRecording (e.g. there was no Track for this Recording where Track.DataTo was equal to RecordingInformation.LatestRecording or there was at least one Track for this Recording where Track.DataTo was greater than RecordingInformation.LatestRecording) in GetRecordingSearchResultResponse.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned the Recording with the same TrackToken twice in one or several <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> messages.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned <emphasis role="bold">GetRecordingInformationResponse</emphasis> message with RecordingToken not equal to RecordingToken in <emphasis role="bold">GetRecordingInformationRequest</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned RecordingInformation structure in <emphasis role="bold">GetRecordingInformationResponse</emphasis> different from RecordingInformation structure in GetRecordingSearchResultResponse for corresponding recording token (see <xref linkend="Annex_RecordingInformationConsistencyCheck"/>).
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--SEARCH-2-1-19-->
      <section xml:id="tc.SEARCH-2-1-19">
        <title>
          RECORDINGS SEARCH - KEEP ALIVE
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-2-1-19
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindRecordings, GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindRecordings, GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify that search session is kept alive during KeepAliveTime.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Search Service is received from the DUT.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client selects keep alive time value by following the procedure mentioned in <xref linkend="Annex_KeepAliveTimeoutValue"/> with the following output parameter
                <itemizedlist>
                  <listitem>
                    <para>out <emphasis role="italic">keepAliveTime</emphasis> – keep alive time</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">FindRecordings</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Scope.IncludedSources skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Scope.IncludedRecordings skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Scope.RecordingInformationFilter skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaxMatches skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      KeepAliveTime := <emphasis role="italic">keepAliveTime</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">FindRecordingsResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SearchToken =: <emphasis role="italic">searchToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client waits during (<emphasis role="italic">keepAliveTime</emphasis> - 1s)
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetRecordingSearchResults</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SearchToken := <emphasis role="italic">searchToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MinResults skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaxResults skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      WaitTime := PT5S
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">FindRecordingsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--SEARCH-2-1-20-->
      <section xml:id="tc.SEARCH-2-1-20">
        <title>
          RECORDINGS SEARCH EXPIRATION
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-2-1-20
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindRecordings, GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindRecordings, GetRecordingSearchResult
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify that search session is rejected when KeepAliveTime expired.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Search Service is received from the DUT.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client selects keep alive time value by following the procedure mentioned in <xref linkend="Annex_KeepAliveTimeoutValue"/> with the following output parameter
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">keepAliveTime</emphasis> – keep alive time
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">FindRecordings</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Scope.IncludedSources skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Scope.IncludedRecordings skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Scope.RecordingInformationFilter skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaxMatches skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      KeepAliveTime := <emphasis role="italic">keepAliveTime</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">FindRecordingsResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SearchToken =: <emphasis role="italic">searchToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client waits during (<emphasis role="italic">keepAliveTime</emphasis> + <emphasis role="italic">timeout</emphasis>)
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetRecordingSearchResults</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SearchToken := <emphasis role="italic">searchToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MinResults skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaxResults skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      WaitTime := PT5S
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with SOAP 1.2 fault message (<emphasis role="bold">InvalidArgVal/InvalidToken</emphasis>).
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">FindRecordingsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send SOAP 1.2 fault message to <emphasis role="bold">GetRecordingSearchResults</emphasis>.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> Other faults than specified in the test are acceptable, though the specified are preferable.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> <emphasis role="italic">timeout</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
        </para>
      </section>
    </section>
    <!--Event Search-->
    <section xml:id="tc.search.event_search"
             xreflabel="Section 5.3">
      <title>Event Search</title>
      <!--SEARCH-3-1-5-->
      <section xml:id="tc.SEARCH-3-1-5">
        <title>
          FIND EVENTS (MAXMATCHES = 1)
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-3-1-5
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindEvents, GetEventSearchResult, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindEvents, GetEventSearchResult, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify event forward and backward search in case MaxMatches = 1.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details).
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Get token Token1 of recording which contains at least one track with data from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingInformationRequest</emphasis> message (RecordingToken = "Token1") to retrieve information about Recording.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingInformationResponse</emphasis> message (RecordingInformation.RecordingToken = Token1, RecordingInformation.EarliestRecording = T1, RecordingInformation.LatestRecording = T2).
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindEventsRequest</emphasis> message (StartPoint = T1, EndPoint = T2, Scope.IncludeRecordings = Token1, IncludeStartState = false, SearchFilter = [empty], MaxMatches = 1, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start event search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindEventsResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetEventSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetEventSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 8-9 until SearchState is equal to Completed.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetEventSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindEventsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session after one event was returned in <emphasis role="bold">GetEventSearchResultsResponse</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned more than one event in the results.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.EarliestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then minimum value of Track.DataFrom will be used as T1.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.LatestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then maximum value of Track.DataTo will be used as T2.
        </para>
      </section>
      <!--SEARCH-3-1-10-->
      <section xml:id="tc.SEARCH-3-1-10">
        <title>
          GET EVENT SEARCH RESULTS WITH INVALID SEARCHTOKEN
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-3-1-10
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> GetEventSearchResult
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetEventSearchResult
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Event Search Result with Invalid Search Token.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> None
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetEventSearchResultsRequest</emphasis> message (invalid SearchToken).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT will generate SOAP 1.2 fault message (InvalidArgVal/InvalidToken).
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send SOAP 1.2 fault message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT sent an incorrect SOAP 1.2 fault message (fault code, namespace, etc.).
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> Other faults than specified in the test are acceptable, though the specified are preferable.
        </para>
      </section>
      <!--SEARCH-3-1-11-->
      <section xml:id="tc.SEARCH-3-1-11">
        <title>
          FIND EVENTS – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS INSIDE RECORDING ENDPOINTS)
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-3-1-11
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindEvents, GetEventSearchResult, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindEvents, GetEventSearchResult, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify event forward and backward search in case the search endpoints are inside the recording endpoints.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details).
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Get token Token1 of recording which contains at least one track with data from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetEventPropertiesRequest</emphasis> message to retrieve all events supported by the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetEventPropertiesResponse</emphasis> message from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingInformationRequest</emphasis> message (RecordingToken = "Token1") to retrieve information about Recording.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingInformationResponse</emphasis> message (RecordingInformation.RecordingToken = Token1, RecordingInformation.EarliestRecording = T1, RecordingInformation.LatestRecording = T2).
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindEventsRequest</emphasis> message (StartPoint = T1 + delta1, EndPoint = T2 - delta2, Scope.IncludeRecordings = Token1, IncludeStartState = true, SearchFilter = [empty], no MaxMatches, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start event search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindEventsResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetEventSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetEventSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 10-11 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT sends virtual events for StartPoint time point with the following topics: "tns1:RecordingHistory/Recording/State" for recording with RecordingToken = Token1.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT sends virtual events for StartPoint time point with the following topics: "tns1:RecordingHistory/Track/State" for each track in recording with RecordingToken = Token1.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT sends virtual events for StartPoint time point with the following topics: "tns1:RecordingHistory/Track/VideoParameters" for each video track in recording with RecordingToken = Token1, if such event is supported by the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT sends virtual events for StartPoint time point with the following topics: "tns1:RecordingHistory/Track/AudioParameters" for each audio track in recording with RecordingToken = Token1, if such event is supported by the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT does not send any virtual events for other time points than StartPoint time point.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT does not send any event outside search endpoints.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindEventsRequest</emphasis> message (StartPoint = T2 - delta2, EndPoint = T1 + delta1, Scope.IncludeRecordings = Token1, IncludeStartState = true, SearchFilter = [empty], no MaxMatches, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start event search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindEventsResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetEventSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetEventSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 19-20 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT sends virtual events for StartPoint time point with the following topics: "tns1:RecordingHistory/Recording/State" for recording with RecordingToken = Token1.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT sends virtual events for StartPoint time point with the following topics: "tns1:RecordingHistory/Track/State" for each track in recording with RecordingToken = Token1.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT sends virtual events for StartPoint time point with the following topics: "tns1:RecordingHistory/Track/VideoParameters" for each video track in recording with RecordingToken = Token1, if such event is supported by the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT sends virtual events for StartPoint time point with the following topics: "tns1:RecordingHistory/Track/AudioParameters" for each audio track in recording with RecordingToken = Token1, if such event is supported by the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT sends virtual events for EndPoint time point with the following topics: "tns1:RecordingHistory/Recording/State" for recording with RecordingToken = Token1.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT sends virtual events for EndPoint time point with following topics: "tns1:RecordingHistory/Track/State" for each track in recording with RecordingToken = Token1.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT sends virtual events for EndPoint time point with the following topics: "tns1:RecordingHistory/Track/VideoParameters" for each video track in recording with RecordingToken = Token1, if such event is supported by the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT sends virtual events for EndPoint time point with the following topics: "tns1:RecordingHistory/Track/AudioParameters" for each audio track in recording with RecordingToken = Token1, if such event is supported by the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT does not send any virtual events for other time points than StartPoint time point or EndPoint time point.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT does not send any event outside search endpoints.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that sets of results from <emphasis role="bold">GetEventSearchResultsResponse</emphasis> messages for the first (steps 8-12) and the second (steps 17-21) event search session are the same except virtual events.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetEventSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindEventsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned a non-virtual events with topic "tns1:RecordingHistory/Track/State" with invalid Recording token, Track token, and IsDataPresent value (IsDataPresent value shall be alternated from true to false for each Track if any of "tns1:RecordingHistory/Track/State" events exists for this Track).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return a valid virtual events with topic "tns1:RecordingHistory/Recording/State" for selected recording for StartPoint or EndPoint. (For EndPoint events are required only for backward search).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return a valid virtual events with topics "tns1:RecordingHistory/Track/State" for each track of selected recording for StartPoint or EndPoint. (For EndPoint events are required only for backward search).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return a valid virtual events with topics "tns1:RecordingHistory/Track/VideoParameters" for each video track of selected recording for StartPoint or EndPoint. (For EndPoint events are required only for backward search).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return a valid virtual events with topics "tns1:RecordingHistory/Track/AudioParameters" for each audio track of selected recording for StartPoint or EndPoint. (For EndPoint events are required only for backward search).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did returned a non-virtual events with topic "tns1:RecordingHistory/Recording/State" with invalid Recording token, and IsRecording value (IsRecording value shall be alternated from true to false).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned an invalid Recording token or invalid Track token for events with following topic if they were present in search results: "tns1:RecordingHistory/Track/State", "tns1:RecordingHistory/Recording/State", "tns1:RecordingHistory/Track/VideoParameters", and "tns1:RecordingHistory/Track/AudioParameters".
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned virtual events for other time points than StartPoint time point for forward search.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned virtual events for other time points than StartPoint time point or EndPoint time point for backward search.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned events outside search endpoints.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return events in ascending order for steps 8-12 (Time of previous result was less than for the next one).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return events in descending order for steps 17-21 (Time of previous result was greater than for the next one).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return the same set of results (excluding virtual events) for steps 8-12 and for steps 17-21 (see <xref linkend="Annex_ComparisonOfEventSearchResults"/>).
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.EarliestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then minimum value of Track.DataFrom will be used as T1.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.LatestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then maximum value of Track.DataTo will be used as T2.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> Events are supposed to be virtual events if StartStateEvent flag is equal to true.
        </para>
      </section>
      <!--SEARCH-3-1-13-->
      <section xml:id="tc.SEARCH-3-1-13">
        <title>
          FIND EVENTS – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS EQUAL TO RECORDING ENDPOINTS)
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-3-1-13
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindEvents, GetEventSearchResult, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindEvents, GetEventSearchResult, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify event forward and backward search in case the search endpoints are equal to the recording endpoints.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details).
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Get token Token1 of recording which contains at least one track with data from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingInformationRequest</emphasis> message (RecordingToken = "Token1") to retrieve information about Recording.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingInformationResponse</emphasis> message (RecordingInformation.RecordingToken = Token1, RecordingInformation.EarliestRecording = T1, RecordingInformation.LatestRecording = T2).
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingsRequest</emphasis> message to retrieve list of all the tracks of recording with RecordingToken = Token1.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindEventsRequest</emphasis> message (StartPoint = T1, EndPoint = T2, Scope.IncludeRecordings = Token1, IncludeStartState = false, SearchFilter = [empty], no MaxMatches, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start event search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindEventsResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetEventSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetEventSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 10-11 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT does not send any virtual events.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT does not send any event outside search endpoints.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindEventsRequest</emphasis> message (StartPoint = T2, EndPoint = T1, Scope.IncludeRecordings = Token1, IncludeStartState = false, SearchFilter = [empty], no MaxMatches, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start event search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindEventsResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetEventSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetEventSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 15-16 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that sets of results from <emphasis role="bold">GetEventSearchResultsResponse</emphasis> messages for the first (steps 8-12) and the second (steps 13-17) event search session are the same.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send valid <emphasis role="bold">GetRecordingInformationResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send valid <emphasis role="bold">GetRecordingsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetEventSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindEventsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return at least two events with topic "tns1:RecordingHistory/Track/State" with valid Recording token, Track token, and IsDataPresent value for each track with data (IsDataPresent value shall be alternated from true to false for each Track if any of "tns1:RecordingHistory/Track/State" events exists for this Track and event with the smallest time for each Track shall have value of IsDataPresent equal to true).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return at least two events with topic "tns1:RecordingHistory/Recording/State" with valid Recording token, and IsRecording value (IsRecording value shall be alternated from true to false and event with the smallest time shall have value of IsRecording equal to true).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned an invalid Recording token or invalid Track token for events with following topic if they were present in search results: "tns1:RecordingHistory/Track/State", "tns1:RecordingHistory/Recording/State", "tns1:RecordingHistory/Track/VideoParameters", and "tns1:RecordingHistory/Track/AudioParameters".
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return events in ascending order for steps 8-12 (Time of previous result was less than for the next one).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return events in descending order for steps 13-17 (Time of previous result was greater than for the next one).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return the same set of results for steps 8-12 and for steps 13-17 (see <xref linkend="Annex_ComparisonOfEventSearchResults"/>).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned virtual events.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned events outside search endpoints.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> RecordingInformation.EarliestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message then minimum value of Track.DataFrom will be used as T1.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> RecordingInformation.LatestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message then maximum value of Track.DataTo will be used as T2.
        </para>
      </section>
      <!--SEARCH-3-1-14-->
      <section xml:id="tc.SEARCH-3-1-14">
        <title>
          FIND EVENTS – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS OUTSIDE RECORDING ENDPOINTS)
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-3-1-14
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindEvents, GetEventSearchResult, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindEvents, GetEventSearchResult, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify event forward and backward search in case the search endpoints are outside the recording endpoints.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details).
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Get token Token1 of recording which contains at least one track with data from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingInformationRequest</emphasis> message (RecordingToken = "Token1") to retrieve information about Recording and tracks with data.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingInformationResponse</emphasis> message (RecordingInformation.RecordingToken = Token1, RecordingInformation.EarliestRecording = T1, RecordingInformation.LatestRecording = T2).
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingsRequest</emphasis> message to retrieve list of all the tracks of recording with RecordingToken = Token1.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindEventsRequest</emphasis> message (StartPoint = T1 – delta1, EndPoint = T2 + delta2, Scope.IncludeRecordings = Token1, IncludeStartState = false, SearchFilter = [empty], no MaxMatches, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start event search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindEventsResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetEventSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetEventSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 9-10 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT does not send any virtual events.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT does not send any events outside search endpoints.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT does not send any events outside recording endpoints.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT does not send any events outside track endpoints (event is outside endpoints of any track).
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT does not send any "tns1:RecordingHistory/Track/State", "tns1:RecordingHistory/Track/VideoParameters", and "tns1:RecordingHistory/Track/AudioParameters" events outside track endpoints for the track with corresponding token.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that DUT does not send any virtual events for other time points than StartPoint time point.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindEventsRequest</emphasis> message (StartPoint = T2 + delta2, EndPoint = T1 – delta1, Scope.IncludeRecordings = Token1, IncludeStartState = false, SearchFilter = [empty], no MaxMatches, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start event search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindEventsResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetEventSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetEventSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 15-16 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that sets of results from <emphasis role="bold">GetEventSearchResultsResponse</emphasis> messages for the first (steps 8-12) and the second (steps 13-17) event search session are the same.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send valid <emphasis role="bold">GetRecordingInformationResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send valid <emphasis role="bold">GetRecordingsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send valid <emphasis role="bold">GetEventSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send valid <emphasis role="bold">FindEventsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach Completed state for the search session.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return at least two events with topic "tns1:RecordingHistory/Track/State" with valid Recording token, Track token, and IsDataPresent value for each track with data (IsDataPresent value shall be alternated from true to false for each Track if any "tns1:RecordingHistory/Track/State" event exist for this Track).
              </para>
            </listitem>
            <listitem>
              <para>
                There was event for at least one Track with topic "tns1:RecordingHistory/Track/State" with the smallest time which had ‘Changed’ property operation and value of IsDataPresent equal to false.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return at least two events with topic "tns1:RecordingHistory/Recording/State" with valid Recording token, and IsRecording value (IsRecording value shall be alternated from true to false).
              </para>
            </listitem>
            <listitem>
              <para>
                Event with topic "tns1:RecordingHistory/Recording/State " with the smallest time had ‘Changed’ property operation and value of IsRecording equal to false.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned invalid Recording token or invalid Track token for events with following topic if they were present in search results: "tns1:RecordingHistory/Track/State", "tns1:RecordingHistory/Recording/State", "tns1:RecordingHistory/Track/VideoParameters", and "tns1:RecordingHistory/Track/AudioParameters".
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return events in ascending order for steps 8-12 (Time of previous result was less than for the next one).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return events in descending order for steps 13-17 (Time of previous result was greater than for next one).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return the same set of results for steps 8-12 and for steps 13-17 (see <xref linkend="Annex_ComparisonOfEventSearchResults"/>).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned virtual events.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned events outside search endpoints.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned events outside recording endpoints.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned events outside track endpoints (event is outside endpoints of any track).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned "tns1:RecordingHistory/Track/State", "tns1:RecordingHistory/Track/VideoParameters", or "tns1:RecordingHistory/Track/AudioParameters" events outside track endpoints for the track with corresponding token.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> RecordingInformation.EarliestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message then minimum value of Track.DataFrom will be used as T1.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> RecordingInformation.LatestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message then maximum value of Track.DataTo will be used as T2.
        </para>
      </section>
      <!--SEARCH-3-1-15-->
      <section xml:id="tc.SEARCH-3-1-15">
        <title>
          EVENTS SEARCH - KEEP ALIVE
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-3-1-15
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindEvents, GetEventSearchResult
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindEvents, GetEventSearchResult
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify that search session is kept alive during KeepAliveTime.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Search Service is received from the DUT. At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details).
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Set <emphasis role="italic">recordingToken</emphasis> := token of recording provided on Management tab.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetRecordingInformation</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      RecordingToken := <emphasis role="italic">recordingToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetRecordingInformationResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      RecordingInformation.RecordingToken = <emphasis role="italic">recordingToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.Source
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.EarliestRecording =: <emphasis role="italic">T1</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.LatestRecording =: <emphasis role="italic">T2</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.Content
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.Track
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.RecordingStatus
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client selects keep alive time value by following the procedure mentioned in <xref linkend="Annex_KeepAliveTimeoutValue"/> with the following output parameter
                <itemizedlist>
                  <listitem>
                    <para>out <emphasis role="italic">keepAliveTime</emphasis> – keep alive time</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">FindEvents</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      StartPoint := <emphasis role="italic">T1</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      EndPoint := <emphasis role="italic">T2</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Scope.IncludedSources skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Scope.IncludedRecordings[0] := <emphasis role="italic">recordingToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Scope.RecordingInformationFilter skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      SearchFilter empty
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      IncludeStartState := false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaxMatches skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      KeepAliveTime := <emphasis role="italic">keepAliveTime</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">FindEventsResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>SearchToken =: <emphasis role="italic">searchToken</emphasis></para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client waits during (<emphasis role="italic">keepAliveTime</emphasis> - 1s)
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetEventSearchResults</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SearchToken := <emphasis role="italic">searchToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MinResults skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaxResults skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      WaitTime := PT5S
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetEventSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetRecordingInformationResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">FindEventsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetEventSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--SEARCH-3-1-16-->
      <section xml:id="tc.SEARCH-3-1-16">
        <title>
          EVENTS SEARCH EXPIRATION
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-3-1-16
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindEvents, GetEventSearchResult
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindEvents, GetEventSearchResult
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify that search session is rejected when KeepAliveTime expired.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Search Service is received from the DUT. At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details).
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Set <emphasis role="italic">recordingToken</emphasis> := token of recording provided on Management tab.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetRecordingInformation</emphasis> request with parameters
              </para>
            </listitem>
            <listitem>
              <para>
                RecordingToken := <emphasis role="italic">recordingToken</emphasis>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetRecordingInformationResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      RecordingInformation.RecordingToken = <emphasis role="italic">recordingToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.Source
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.EarliestRecording =: <emphasis role="italic">T1</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.LatestRecording =: <emphasis role="italic">T2</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.Content
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.Track
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.RecordingStatus
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client selects keep alive time value by following the procedure mentioned in <xref linkend="Annex_KeepAliveTimeoutValue"/> with the following output parameter
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">keepAliveTime</emphasis> – keep alive time
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">FindEvents</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      StartPoint := <emphasis role="italic">T1</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      EndPoint := <emphasis role="italic">T2</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Scope.IncludedSources skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Scope.IncludedRecordings[0] := <emphasis role="italic">recordingToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Scope.RecordingInformationFilter skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      SearchFilter empty
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      IncludeStartState := false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaxMatches skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      KeepAliveTime := <emphasis role="italic">keepAliveTime</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">FindEventsResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SearchToken =: <emphasis role="italic">searchToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client waits during (<emphasis role="italic">keepAliveTime</emphasis> + <emphasis role="italic">timeout</emphasis>)
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetEventSearchResults</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SearchToken := <emphasis role="italic">searchToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MinResults skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaxResults skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      WaitTime := PT5S
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with SOAP 1.2 fault message (<emphasis role="bold">InvalidArgVal/InvalidToken</emphasis>).
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetRecordingInformationResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">FindEventsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send SOAP 1.2 fault message to <emphasis role="bold">GetEventSearchResults</emphasis>.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> Other faults than specified in the test are acceptable, though the specified are preferable.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> <emphasis role="italic">timeout</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
        </para>
      </section>
    </section>
    <!--Metadata Search-->
    <section xml:id="tc.search.metadata_search"
             xreflabel="Section 5.4">
      <title>Metadata Search</title>
      <!--SEARCH-5-1-1-->
      <section xml:id="tc.SEARCH-5-1-1">
        <title>
          FIND METADATA – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS EQUAL TO RECORDING ENDPOINTS)
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-5-1-1
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindMetadata, GetMetadataSearchResults, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindMetadata, GetMetadataSearchResults, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify metadata forward and backward search in case the search endpoints are equal to the recording endpoints.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details). The recording shall contain metadata.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Get token Token1 of recording which contains at least one track with metadata from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingInformationRequest</emphasis> message (RecordingToken = "Token1") to retrieve information about Recording.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingInformationResponse</emphasis> message (RecordingInformation.RecordingToken = Token1, RecordingInformation.EarliestRecording = T1, RecordingInformation.LatestRecording = T2).
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindMetadataRequest</emphasis> message (StartPoint = T1, EndPoint = T2, Scope.IncludeRecordings = Token1, MetadataFilter.MetadataStreamFilter = MetadataFilter1, no MaxMatches, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start metadata search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindMetadataResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetMetadataSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT. Check that time (ResultList.Result.Time) of the search result is inside the search endpoints that were defined in <emphasis role="bold" service="skip">FindMetadataRequest</emphasis> message at step 6.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 8-9 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindMetadataRequest</emphasis> message (StartPoint = T2, EndPoint = T1, Scope.IncludeRecordings = Token1, MetadataFilter.MetadataStreamFilter = MetadataFilter1, no MaxMatches, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start metadata search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindMetadataResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetMetadataSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT. Check that time (ResultList.Result.Time) of the search result is inside the search endpoints that were defined in <emphasis role="bold" service="skip">FindMetadataRequest</emphasis> message at step 11.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 13-14 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that sets of results from <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> messages for the first (steps 6-10) and the second (steps 11-15) metadata search session are the same.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindMetadataResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned metadata search results with invalid time (Time is not inside the search endpoints).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned an invalid Recording token or invalid Track token for metadata search results.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return metadata search results in ascending order for steps 6-10 (Time of previous result was greater than for the next one or equal to it).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return metadata search results in descending order for steps 11-15 (Time of previous result was less than for the next one or equal to it).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return the same set of results for steps 6-10 and for steps 11-15 (see <xref linkend="Annex_ComparisonOfMetadataSearchResults"/>).
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.EarliestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then minimum value of Track.DataFrom will be used as T1.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.LatestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then maximum value of Track.DataTo will be used as T2.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> MetdataFilter1 is specified by user and assigned to data that is contained in the recording with token = Token1.
        </para>
      </section>
      <!--SEARCH-5-1-2-->
      <section xml:id="tc.SEARCH-5-1-2">
        <title>
          FIND METADATA – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS OUTSIDE RECORDING ENDPOINTS)
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-5-1-2
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindMetadata, GetMetadataSearchResults, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindMetadata, GetMetadataSearchResults, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify metadata forward and backward search in case the search endpoints are outside the recording endpoints.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details). The recording shall contain metadata.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Get token Token1 of recording which contains at least one track with metadata data from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingInformationRequest</emphasis> message (RecordingToken = "Token1") to retrieve information about Recording.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingInformationResponse</emphasis> message (RecordingInformation.RecordingToken = Token1, RecordingInformation.EarliestRecording = T1, RecordingInformation.LatestRecording = T2).
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindMetadataRequest</emphasis> message (StartPoint = T1 – delta1, EndPoint = T2 + delta2, Scope.IncludeRecordings = Token1, MetadataFilter.MetadataStreamFilter = MetadataFilter1, no MaxMatches, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start metadata search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindMetadataResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetMetadataSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT. Check that time (ResultList.Result.Time) of the search result is inside the recording endpoints that were defined in <emphasis role="bold">GetRecordingInformationResponse</emphasis> at step 5.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 8-9 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindMetadataRequest</emphasis> message (StartPoint = T2 + delta2, EndPoint = T1 – delta1, Scope.IncludeRecordings = Token1, MetadataFilter.MetadataStreamFilter = MetadataFilter1, no MaxMatches, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start metadata search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindMetadataResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetMetadataSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT. Check that time (ResultList.Result.Time) of the search result is inside the recording endpoints that were defined in <emphasis role="bold">GetRecordingInformationResponse</emphasis> at step 5.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 13-14 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that sets of results from <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> messages for the first (steps 6-10) and the second (steps 11-15) metadata search session are the same.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindMetadataResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned metadata search results with invalid time (Time is not inside the recording endpoints).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned invalid Recording token or invalid Track token for metadata search results.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return metadata search results in ascending order for steps 6-10 (Time of previous result was greater than for the next one or equal to it).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return metadata search results in descending order for steps 11-15 (Time of previous result was less than for the next one or equal to it).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return the same set of results for steps 6-10 and for steps 11-15 (see <xref linkend="Annex_ComparisonOfMetadataSearchResults"/>).
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.EarliestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then minimum value of Track.DataFrom will be used as T1.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.LatestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then maximum value of Track.DataTo will be used as T2.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> MetdataFilter1 is specified by user and assigned to data that is contained in the recording with token = Token1.
        </para>
      </section>
      <!--SEARCH-5-1-3-->
      <section xml:id="tc.SEARCH-5-1-3">
        <title>
          FIND METADATA – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS INSIDE RECORDING ENDPOINTS)
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-5-1-3
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindMetadata, GetMetadataSearchResults, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindMetadata, GetMetadataSearchResults, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify metadata forward and backward search in case the search endpoints are inside the recording endpoints.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details). The recording shall contain metadata.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Get token Token1 of recording which contains at least one track with metadata data from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingInformationRequest</emphasis> message (RecordingToken = "Token1") to retrieve information about Recording.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingInformationResponse</emphasis> message (RecordingInformation.RecordingToken = Token1, RecordingInformation.EarliestRecording = T1, RecordingInformation.LatestRecording = T2).
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindMetadataRequest</emphasis> message (StartPoint = T1 + delta1, EndPoint = T2 - delta2, Scope.IncludeRecordings = Token1, MetadataFilter.MetadataStreamFilter = MetadataFilter1, no MaxMatches, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start metadata search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindMetadataResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetMetadataSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT. Check that time (ResultList.Result.Time) of the search result is inside the search endpoints that were defined in <emphasis role="bold" service="skip">FindMetadataRequest</emphasis> message at step 6.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 8-9 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindMetadataRequest</emphasis> message (StartPoint = T2 - delta2, EndPoint = T1 + delta1, Scope.IncludeRecordings = Token1, MetadataFilter.MetadataStreamFilter = MetadataFilter1, no MaxMatches, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start metadata search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindMetadataResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetMetadataSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT. Check that time (ResultList.Result.Time) of the search result is inside the search endpoints that were defined in <emphasis role="bold" service="skip">FindMetadataRequest</emphasis> message at step 11.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 13-14 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that sets of results from <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> messages for the first (steps 6-10) and the second (steps 11-15) metadata search session are the same.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindMetadataResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned metadata search results with invalid time (Time is not inside the search endpoints).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned invalid Recording token or invalid Track token for metadata search result.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return metadata search results in ascending order for steps 6-10 (Time of previous result was greater than for the next one or equal to it).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return metadata search results in descending order for steps 11-15 (Time of previous result was less than for the next one or equal to it).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return the same set of results for steps 6-10 and for steps 11-15 (see <xref linkend="Annex_ComparisonOfMetadataSearchResults"/>).
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.EarliestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then minimum value of Track.DataFrom will be used as T1.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.LatestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then maximum value of Track.DataTo will be used as T2.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> MetdataFilter1 is specified by user and assigned to data that is contained in the recording with token = Token1.
        </para>
      </section>
      <!--SEARCH-5-1-4-->
      <section xml:id="tc.SEARCH-5-1-4">
        <title>
          FIND METADATA (MAXMATCHES = 1)
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-5-1-4
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindMetadata, GetMetadataSearchResults, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindMetadata, GetMetadataSearchResults, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify metadata search in case MaxMatches = 1.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details). The recording shall contain metadata.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Get token Token1 of recording which contains at least one track with metadata data from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingInformationRequest</emphasis> message (RecordingToken = "Token1") to retrieve information about Recording.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingInformationResponse</emphasis> message (RecordingInformation.RecordingToken = Token1, RecordingInformation.EarliestRecording = T1, RecordingInformation.LatestRecording = T2).
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindMetadataRequest</emphasis> message (StartPoint = T1, EndPoint = T2, Scope.IncludeRecordings = Token1, MetadataFilter.MetadataStreamFilter = MetadataFilter1, MaxMatches = 1, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start metadata search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindMetadataResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetMetadataSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT. Check that time (ResultList.Result.Time) of the search result is inside the search endpoints that were defined in <emphasis role="bold" service="skip">FindMetadataRequest</emphasis> message at step 6.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 8-9 until SearchState is equal to Completed.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindMetadataResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session after one metadata was returned in <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned more than one metadata in results.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.EarliestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then minimum value of Track.DataFrom will be used as T1.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.LatestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then maximum value of Track.DataTo will be used as T2.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> MetdataFilter1 is specified by user and assigned to data that is contained in the recording with token = Token1.
        </para>
      </section>
      <!--SEARCH-5-1-5-->
      <section xml:id="tc.SEARCH-5-1-5">
        <title>
          FIND METADATA (NO RESULTS)
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-5-1-5
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindMetadata, GetMetadataSearchResults, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindMetadata, GetMetadataSearchResults, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify metadata search in case no results for the specified filter exist.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details).
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Get token Token1 of recording which contains at least one track with metadata data from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingInformationRequest</emphasis> message (RecordingToken = "Token1") to retrieve information about Recording.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingInformationResponse</emphasis> message (RecordingInformation.RecordingToken = Token1, RecordingInformation.EarliestRecording = T1, RecordingInformation.LatestRecording = T2).
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindMetadataRequest</emphasis> message (StartPoint = T1, EndPoint = T2, Scope.IncludeRecordings = Token1, MetadataFilter.MetadataStreamFilter = "boolean(//Track[TrackToken = "NonExistingToken"])", MaxMatches = 1, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start metadata search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindMetadataResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetMetadataSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 8-9 until SearchState is equal to Completed.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindMetadataResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned at least one metadata in results.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.EarliestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then minimum value of Track.DataFrom will be used as T1.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.LatestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then maximum value of Track.DataTo will be used as T2.
        </para>
      </section>
      <!--SEARCH-5-1-6-->
      <section xml:id="tc.SEARCH-5-1-6">
        <title>
          GET METADATA SEARCH RESULTS WITH INVALID SEARCHTOKEN
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-5-1-6
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> GetMetadataSearchResults
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetMetadataSearchResults
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Metadata Search Result with Invalid Search Token.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> None
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetMetadataSearchResultsRequest</emphasis> message (invalid SearchToken).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT will generate SOAP 1.2 fault message (InvalidArgVal/InvalidToken).
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send SOAP 1.2 fault message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT sent an incorrect SOAP 1.2 fault message (fault code, namespace, etc.).
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> Other faults than specified in the test are acceptable, though the specified are preferable.
        </para>
      </section>
      <!--SEARCH-5-1-7-->
      <section xml:id="tc.SEARCH-5-1-7">
        <title>
          METADATA SEARCH - KEEP ALIVE
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-5-1-7
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindMetadata, GetMetadataSearchResults
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindMetadata, GetMetadataSearchResults
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify that search session is kept alive during KeepAliveTime.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Search Service is received from the DUT. At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details). The recording shall contain metadata.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Set <emphasis role="italic">recordingToken</emphasis> := token of recording provided on Management tab.
              </para>
            </listitem>
            <listitem>
              <para>
                Set <emphasis role="italic">metadataFilter</emphasis> := Metadata Filter value provided on Management tab.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetRecordingInformation</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>RecordingToken := <emphasis role="italic">recordingToken</emphasis></para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetRecordingInformationResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      RecordingInformation.RecordingToken = <emphasis role="italic">recordingToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.Source
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.EarliestRecording =: <emphasis role="italic">T1</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.LatestRecording =: <emphasis role="italic">T2</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.Content
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.Track
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.RecordingStatus
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client selects keep alive time value by following the procedure mentioned in <xref linkend="Annex_KeepAliveTimeoutValue"/> with the following output parameter
                <itemizedlist>
                  <listitem>
                    <para>out <emphasis role="italic">keepAliveTime</emphasis> – keep alive time</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">FindMetadata</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      StartPoint := <emphasis role="italic">T1</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      EndPoint := <emphasis role="italic">T2</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Scope.IncludedSources skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Scope.IncludedRecordings[0] := <emphasis role="italic">recordingToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Scope.RecordingInformationFilter skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MetadataFilter.MetadataStreamFilter := <emphasis role="italic">metadataFilter</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaxMatches skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      KeepAliveTime := <emphasis role="italic">keepAliveTime</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">FindMetadataResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>SearchToken =: searchToken</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client waits during (<emphasis role="italic">keepAliveTime</emphasis> - 1s)
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetMetadataSearchResults</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SearchToken := <emphasis role="italic">searchToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MinResults skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaxResults skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      WaitTime := PT5S
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetRecordingInformationResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">FindMetadataResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--SEARCH-5-1-8-->
      <section xml:id="tc.SEARCH-5-1-8">
        <title>
          METADATA SEARCH EXPIRATION
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-5-1-8
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindMetadata, GetMetadataSearchResults
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindMetadata, GetMetadataSearchResults
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify that search session is kept alive during KeepAliveTime.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Search Service is received from the DUT. At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details). The recording shall contain metadata.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Set <emphasis role="italic">recordingToken</emphasis> := token of recording provided on Management tab.
              </para>
            </listitem>
            <listitem>
              <para>
                Set <emphasis role="italic">metadataFilter</emphasis> := Metadata Filter value provided on Management tab.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetRecordingInformation</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>RecordingToken := <emphasis role="italic">recordingToken</emphasis></para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetRecordingInformationResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      RecordingInformation.RecordingToken = <emphasis role="italic">recordingToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.Source
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.EarliestRecording =: <emphasis role="italic">T1</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.LatestRecording =: <emphasis role="italic">T2</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.Content
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.Track
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.RecordingStatus
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client selects keep alive time value by following the procedure mentioned in <xref linkend="Annex_KeepAliveTimeoutValue"/> with the following output parameter
                <itemizedlist>
                  <listitem>
                    <para>out <emphasis role="italic">keepAliveTime</emphasis> – keep alive time</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">FindMetadata</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      StartPoint := <emphasis role="italic">T1</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      EndPoint := <emphasis role="italic">T2</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Scope.IncludedSources skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Scope.IncludedRecordings[0] := <emphasis role="italic">recordingToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Scope.RecordingInformationFilter skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MetadataFilter.MetadataStreamFilter := <emphasis role="italic">metadataFilter</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaxMatches skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      KeepAliveTime := <emphasis role="italic">keepAliveTime</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">FindMetadataResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>SearchToken =: <emphasis role="italic">searchToken</emphasis></para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client waits during (<emphasis role="italic">keepAliveTime</emphasis> + <emphasis role="italic">timeout</emphasis>)
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetMetadataSearchResults</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SearchToken := <emphasis role="italic">searchToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MinResults skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaxResults skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      WaitTime := PT5S
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with SOAP 1.2 fault message (<emphasis role="bold">InvalidArgVal/InvalidToken</emphasis>).
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetRecordingInformationResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">FindMetadataResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send SOAP 1.2 fault message to <emphasis role="bold">GetMetadataSearchResults</emphasis>.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> Other faults than specified in the test are acceptable, though the specified are preferable.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> <emphasis role="italic">timeout</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool. 
        </para>
      </section>
    </section>
    <!--PTZ Search-->
    <section xml:id="tc.search.ptz_search"
             xreflabel="Section 5.5">
      <title>PTZ Search</title>
      <!--SEARCH-6-1-7-->
      <section xml:id="tc.SEARCH-6-1-7">
        <title>
          GET PTZ POSITION SEARCH RESULTS WITH INVALID SEARCHTOKEN
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-6-1-7
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> GetPTZPositionSearchResults
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetPTZPositionSearchResults
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get PTZ Position Search Result with Invalid Search Token.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> None
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetPTZPositionSearchResultsRequest</emphasis> message (invalid SearchToken).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT will generate SOAP 1.2 fault message (InvalidArgVal/InvalidToken).
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send SOAP 1.2 fault message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT sent an incorrect SOAP 1.2 fault message (fault code, namespace, etc.).
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> Other faults than specified in the test are acceptable, though the specified are preferable.
        </para>
      </section>
      <!--SEARCH-6-1-8-->
      <section xml:id="tc.SEARCH-6-1-8">
        <title>
          FIND PTZ POSITION – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS EQUAL TO RECORDING ENDPOINTS)
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-6-1-8
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindPTZPosition, GetPTZPositionSearchResults, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindPTZPosition, GetPTZPositionSearchResults, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify PTZ position forward and backward search in case the search endpoints are equal to the recording endpoints.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details). The recording shall contain PTZ metadata and that the matching PTZ search criterion is present in the recording.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Get token Token1 of recording which contains at least one track with PTZ position data from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingInformationRequest</emphasis> message (RecordingToken = "Token1") to retrieve information about Recording.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingInformationResponse</emphasis> message (RecordingInformation.RecordingToken = Token1, RecordingInformation.EarliestRecording = T1, RecordingInformation.LatestRecording = T2).
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindPTZPositionRequest</emphasis> message (StartPoint = T1, EndPoint = T2, Scope.IncludeRecordings = Token1, SearchFilter.MinPosition.PanTilt = [-1,-1], SearchFilter.MaxPosition.PanTilt = [1, 1], SearchFilter.EnterOrExit = ’False’, no MaxMatches, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start PTZ positions search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindPTZPositionResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetPTZPositionSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT. Check that time (ResultList.Result.Time) of the search result is inside the search endpoints that were defined in <emphasis role="bold" service="skip">FindPTZPositionRequest</emphasis> message at step 6.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 8-9 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindPTZPositionRequest</emphasis> message (StartPoint = T2, EndPoint = T1, Scope.IncludeRecordings = Token1, SearchFilter.MinPosition.PanTilt = [-1,-1], SearchFilter.MaxPosition.PanTilt = [1, 1], SearchFilter.EnterOrExit = ’False’, no MaxMatches, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start PTZ positions search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindPTZPositionResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetPTZPositionSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT. Check that time (ResultList.Result.Time) of the search result is inside the search endpoints that were defined in <emphasis role="bold" service="skip">FindPTZPositionRequest</emphasis> message at step 11.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 13-14 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that sets of results from <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> messages for the first (steps 6-10) and the second (steps 11-15) PTZ position search session are the same.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindPTZPositionResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned PTZ position search results with invalid time (Time is not inside the search endpoints).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned invalid Recording token or invalid Track token for PTZ position search results.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return PTZ position search results in ascending order for steps 6-10 (Time of previous result was greater than for the next one or equal to it).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return PTZ position search results in descending order for steps 11-15 (Time of previous result was less than for the next one or equal to it).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return the same set of results for steps 6-10 and for steps 11-15 (see <xref linkend="Annex_ComparisonOfPtzSearchResults"/>).
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.EarliestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then minimum value of Track.DataFrom will be used as T1.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.LatestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then maximum value of Track.DataTo will be used as T2.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> contains responses with Position.PanTilt out of requested range, ONVIF Device Test Tool will report it as warning.
        </para>
      </section>
      <!--SEARCH-6-1-9-->
      <section xml:id="tc.SEARCH-6-1-9">
        <title>
          FIND PTZ POSITION – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS OUTSIDE RECORDING ENDPOINTS)
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-6-1-9
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindPTZPosition, GetPTZPositionSearchResults, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindPTZPosition, GetPTZPositionSearchResults, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify PTZ position forward and backward search in case the search endpoints are outside the recording endpoints.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details). The recording shall contain PTZ metadata and that the matching PTZ search criterion is present in the recording.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Get token Token1 of recording which contains at least one track with PTZ position data from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingInformationRequest</emphasis> message (RecordingToken = "Token1") to retrieve information about Recording.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingInformationResponse</emphasis> message (RecordingInformation.RecordingToken = Token1, RecordingInformation.EarliestRecording = T1, RecordingInformation.LatestRecording = T2).
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindPTZPositionRequest</emphasis> message (StartPoint = T1 – delta1, EndPoint = T2 + delta2, Scope.IncludeRecordings = Token1, SearchFilter.MinPosition.PanTilt = [-1,-1], SearchFilter.MaxPosition.PanTilt = [1, 1], SearchFilter.EnterOrExit = ’False’, no MaxMatches, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start PTZ positions search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindPTZPositionResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetPTZPositionSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT. Check that time (ResultList.Result.Time) of the search result is inside the recording endpoints that were defined in <emphasis role="bold">GetRecordingInformationResponse</emphasis> at step 5.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 8-9 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindPTZPositionRequest</emphasis> message (StartPoint = T2 + delta2, EndPoint = T1 – delta1, Scope.IncludeRecordings = Token1, SearchFilter.MinPosition.PanTilt = [-1,-1], SearchFilter.MaxPosition.PanTilt = [1, 1], SearchFilter.EnterOrExit = ’False’, no MaxMatches, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start PTZ positions search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindPTZPositionResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetPTZPositionSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT. Check that time (ResultList.Result.Time) of the search result inside the recording endpoints that were defined in <emphasis role="bold">GetRecordingInformationResponse</emphasis> at step 5.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 13-14 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that sets of results from <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> messages for the first (steps 6-10) and the second (steps 11-15) PTZ position search session are the same.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindPTZPositionResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned PTZ position search results with invalid time (Time is not inside the recording endpoints).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned invalid Recording token or invalid Track token for PTZ position search results.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return PTZ position search results in ascending order for steps 6-10 (Time of previous result was greater than for the next one or equal to it).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return PTZ position search results in descending order for steps 11-15 (Time of previous result was less than for the next one or equal to it).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return the same set of results for steps 6-10 and for steps 11-15 (see <xref linkend="Annex_ComparisonOfPtzSearchResults"/>).
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.EarliestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then minimum value of Track.DataFrom will be used as T1.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.LatestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then maximum value of Track.DataTo will be used as T2.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> contains responses with Position.PanTilt out of requested range, ONVIF Device Test Tool will report it as warning.
        </para>
      </section>
      <!--SEARCH-6-1-10-->
      <section xml:id="tc.SEARCH-6-1-10">
        <title>
          FIND PTZ POSITION – FORWARD AND BACKWARD SEARCH (SEARCH ENDPOINTS INSIDE RECORDING ENDPOINTS)
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-6-1-10
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindPTZPosition, GetPTZPositionSearchResults, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindPTZPosition, GetPTZPositionSearchResults, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify PTZ position forward and backward search in case the search endpoints are inside the recording endpoints.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details). The recording shall contain PTZ metadata and that the matching PTZ search criterion is present in the recording.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Get token Token1 of recording which contains at least one track with PTZ position data from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingInformationRequest</emphasis> message (RecordingToken = "Token1") to retrieve information about Recording.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingInformationResponse</emphasis> message (RecordingInformation.RecordingToken = Token1, RecordingInformation.EarliestRecording = T1, RecordingInformation.LatestRecording = T2).
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindPTZPositionRequest</emphasis> message (StartPoint = T1 + delta1, EndPoint = T2 - delta2, Scope.IncludeRecordings = Token1, SearchFilter.MinPosition.PanTilt = [-1,-1], SearchFilter.MaxPosition.PanTilt = [1, 1], SearchFilter.EnterOrExit = ’False’, no MaxMatches, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start PTZ positions search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindPTZPositionResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetPTZPositionSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT. Check that time (ResultList.Result.Time) of the search result is inside the search endpoints that were defined in <emphasis role="bold" service="skip">FindPTZPositionRequest</emphasis> message at step 6.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 8-9 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindPTZPositionRequest</emphasis> message (StartPoint = T2 - delta2, EndPoint = T1 + delta1, Scope.IncludeRecordings = Token1, SearchFilter.MinPosition.PanTilt = [-1,-1], SearchFilter.MaxPosition.PanTilt = [1, 1], SearchFilter.EnterOrExit = ’False’, no MaxMatches, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start PTZ positions search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindPTZPositionResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetPTZPositionSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT. Check that time (ResultList.Result.Time) of the search result is inside the search endpoints that were defined in <emphasis role="bold" service="skip">FindPTZPositionRequest</emphasis> message at step 11.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 13-14 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that sets of results from <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> messages for the first (steps 6-10) and the second (steps 11-15) PTZ position search session are the same.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindPTZPositionResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned PTZ position search results with invalid time (Time is not inside the search endpoints).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned invalid Recording token or invalid Track token for PTZ position search results.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return PTZ position search results in ascending order for steps 6-10 (Time of previous result was greater than for the next one or equal to it).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return PTZ position search results in descending order for steps 11-15 (Time of previous result was less than for the next one or equal to it).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not return the same set of results for steps 6-10 and for steps 11-15 (see <xref linkend="Annex_ComparisonOfPtzSearchResults"/>).
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.EarliestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then minimum value of Track.DataFrom will be used as T1.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.LatestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then maximum value of Track.DataTo will be used as T2.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> contains responses with Position.PanTilt out of requested range, ONVIF Device Test Tool will report it as warning.
        </para>
      </section>
      <!--SEARCH-6-1-11-->
      <section xml:id="tc.SEARCH-6-1-11">
        <title>
          FIND PTZ POSITION (MAXMATCHES = 1)
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-6-1-11
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindPTZPosition, GetPTZPositionSearchResults, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindPTZPosition, GetPTZPositionSearchResults, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify PTZ position search in case MaxMatches = 1.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details). The recording shall contain PTZ metadata and that the matching PTZ search criterion is present in the recording.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Get token Token1 of recording which contains at least one track with PTZ position data from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingInformationRequest</emphasis> message (RecordingToken = "Token1") to retrieve information about Recording.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingInformationResponse</emphasis> message (RecordingInformation.RecordingToken = Token1, RecordingInformation.EarliestRecording = T1, RecordingInformation.LatestRecording = T2).
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindPTZPositionRequest</emphasis> message (StartPoint = T1, EndPoint = T2, Scope.IncludeRecordings = Token1, SearchFilter.MinPosition.PanTilt = [-1,-1], SearchFilter.MaxPosition.PanTilt = [1, 1], SearchFilter.EnterOrExit = ’False’, MaxMatches = 1, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start PTZ positions search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindPTZPositionResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetPTZPositionSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT. Check that time (ResultList.Result.Time) of the search result is inside the search endpoints that were defined in <emphasis role="bold" service="skip">FindPTZPositionRequest</emphasis> message at step 6.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 8-9 until SearchState is equal to Completed.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindPTZPositionResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned PTZ position search results with invalid time (Time is not inside the search endpoints).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned invalid Recording token or invalid Track token for PTZ position search results.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach Completed state for the search session after one PTZPosition was returned in <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned more than one PTZ position in results.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.EarliestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then minimum value of Track.DataFrom will be used as T1.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.LatestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then maximum value of Track.DataTo will be used as T2.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> contains responses with Position.PanTilt out of requested range, ONVIF Device Test Tool will report it as warning.
        </para>
      </section>
      <!--SEARCH-6-1-12-->
      <section xml:id="tc.SEARCH-6-1-12">
        <title>
          FIND PTZ POSITIONS USING RECORDING INFORMATION FILTER
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-6-1-12
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindPTZPosition, GetPTZPositionSearchResult, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindPTZPosition, GetPTZPositionSearchResult, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify FindPTZPosition with the specified RecordingInformationFilter (filter to find only recordings with audio track).
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording with metadata track exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details). The recording shall contain PTZ metadata and that the matching PTZ search criterion is present in the recording.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindPTZPositionRequest</emphasis> message (StartPoint = 0001-01-01T00:00:00Z, Scope.RecordingInformationFilter = "boolean(//Track[TrackType = "Audio"])", SearchFilter.MinPosition.PanTilt = [-1,-1], SearchFilter.MaxPosition.PanTilt = [1, 1], SearchFilter.EnterOrExit = ’False’, MaxMatches = 20, KeepAlive = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start PTZ positions search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindPTZPositionResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetPTZPositionSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", MinResults = 1, WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], Result list, ResultList.Result.RecordingToken = RecordingToken1, ResultList.Result.Time) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingInformationRequest</emphasis> message (RecordingToken = "RecordingToken1") to retrieve information about Recording.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingInformationResponse</emphasis> message (RecordingInformation.RecordingToken = RecordingToken1, RecordingInformation.EarliestRecording = T1, RecordingInformation.LatestRecording = T2, RecordingInformation.Track.TrackType = Audio). Check that this recording contains at least one track with Audio. Check that time (ResultList.Result.Time) of search result returned at step 6 is inside the Recording endpoints.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 5-8 until SearchState is equal to Completed.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindPTZPositionResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned PTZ position search results with invalid time (ResultList.Result.Time is not inside the Recording endpoints).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned Recordings without Tracks with TrackType equal to "Audio".
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The DUT could return no result at step 6 if it has no recordings with audio track.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> contains responses with Position.PanTilt out of requested range, ONVIF Device Test Tool will report it as warning.
        </para>
      </section>
      <!--SEARCH-6-1-13-->
      <section xml:id="tc.SEARCH-6-1-13">
        <title>
          FIND PTZ POSITION – SEARCHING IN A CERTAIN POSITION
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-6-1-13
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindPTZPosition, GetPTZPositionSearchResult, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindPTZPosition, GetPTZPositionSearchResult, GetRecordingInformation
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify FindPTZPosition with specified SearchFilter (filter that uses known PTZPosition).
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details). The recording shall contain PTZ metadata and that the matching PTZ search criterion is present in the recording.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Get token Token1 of recording which contains at least one track with PTZ position data from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingInformationRequest</emphasis> message (RecordingToken = "Token1") to retrieve information about Recording.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingInformationResponse</emphasis> message (RecordingInformation.RecordingToken = Token1, RecordingInformation.EarliestRecording = T1, RecordingInformation.LatestRecording = T2).
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindPTZPositionRequest</emphasis> message (StartPoint = T2, EndPoint = T1, Scope.IncludeRecordings = Token1, SearchFilter.MinPosition.PanTilt = [-1,-1], SearchFilter.MaxPosition.PanTilt = [1, 1], SearchFilter.EnterOrExit = ’False’, KeepAlive = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start PTZ positions search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindPTZPositionResponse</emphasis> message (SearchToken = "Token1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetPTZPositionSearchResultsRequest</emphasis> message (SearchToken = "Token1", MinResults = 1, WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], Result.Position.PanTilt = PTZPosition1) from the DUT. Check that time (ResultList.Result.Time) of the search result is inside the search endpoints that were defined in <emphasis role="bold" service="skip">FindPTZPositionRequest</emphasis> message at step 6.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 8-9 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindPTZPositionRequest</emphasis> message (StartPoint = T2, EndPoint = T1, Scope.IncludeRecordings = Token1, SearchFilter.MinPosition.PanTilt = PTZPosition1, SearchFilter.MaxPosition.PanTilt = PTZPosition1, SearchFilter.EnterOrExit = ’False’, KeepAlive = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start a PTZ position search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindPTZPositionResponse</emphasis> message (SearchToken = "Token2") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetPTZPositionSearchResultsRequest</emphasis> message (SearchToken = "Token1", MinResults = 1, WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], Result.Position.PanTilt) from the DUT. Check that time (ResultList.Result.Time) of the search result is inside the search endpoints that were defined in <emphasis role="bold" service="skip">FindPTZPositionRequest</emphasis> message at step 11.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 13-14 until SearchState is equal to Completed.
              </para>
            </listitem>
            <listitem>
              <para>
                Check search results: The Result.Position.PanTilt shall be the same as PTZPosition1.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindPTZPositionResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned PTZ position search results with invalid time (Time is not inside the search endpoints).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned invalid Recording token or invalid Track token for PTZ position search results.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not reach the Completed state for the search session.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returned at step 14 the Position that differs from PTZPosition1.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> contains responses with Position.PanTilt out of requested range, ONVIF Device Test Tool will report it as warning.
        </para>
      </section>
      <!--SEARCH-6-1-14-->
      <section xml:id="tc.SEARCH-6-1-14">
        <title>
          PTZ SEARCH - KEEP ALIVE
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-6-1-14
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindPTZPosition, GetPTZPositionSearchResults
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindPTZPosition, GetPTZPositionSearchResults
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify that search session is rejected when KeepAliveTime expired.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Search Service is received from the DUT. At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details). The recording shall contain PTZ metadata and that the matching PTZ search criterion is present in the recording.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Set <emphasis role="italic">recordingToken</emphasis> := token of recording provided on Management tab.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetRecordingInformation</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>RecordingToken := <emphasis role="italic">recordingToken</emphasis></para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetRecordingInformationResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      RecordingInformation.RecordingToken = <emphasis role="italic">recordingToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.Source
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.EarliestRecording =: <emphasis role="italic">T1</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.LatestRecording =: <emphasis role="italic">T2</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.Content
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.Track
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.RecordingStatus
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client selects keep alive time value by following the procedure mentioned in <xref linkend="Annex_KeepAliveTimeoutValue"/> with the following output parameter
                <itemizedlist>
                  <listitem>
                    <para>out <emphasis role="italic">keepAliveTime</emphasis> – keep alive time</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">FindPTZPosition</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      StartPoint := <emphasis role="italic">T1</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      EndPoint := <emphasis role="italic">T2</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Scope.IncludedSources skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Scope.IncludedRecordings[0] := <emphasis role="italic">recordingToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Scope.RecordingInformationFilter skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      SearchFilter.MinPosition.PanTilt := [-1,-1]
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      SearchFilter.MaxPosition.PanTilt := [1, 1]
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      SearchFilter.EnterOrExit := false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaxMatches skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      KeepAliveTime := <emphasis role="italic">keepAliveTime</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">FindPTZPositionResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>SearchToken =: <emphasis role="italic">searchToken</emphasis></para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client waits during (<emphasis role="italic">keepAliveTime</emphasis> - 1s)
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetPTZPositionSearchResults</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SearchToken := <emphasis role="italic">searchToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MinResults skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaxResults skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      WaitTime := PT5S
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetRecordingInformationResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">FindPTZPositionResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--SEARCH-6-1-15-->
      <section xml:id="tc.SEARCH-6-1-15">
        <title>
          PTZ SEARCH EXPIRATION
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-6-1-15
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> FindPTZPosition, GetPTZPositionSearchResults
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> FindPTZPosition, GetPTZPositionSearchResults
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify that search session is kept alive during KeepAliveTime.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Search Service is received from the DUT. At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details). The recording shall contain PTZ metadata and that the matching PTZ search criterion is present in the recording.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Set <emphasis role="italic">recordingToken</emphasis> := token of recording provided on Management tab.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetRecordingInformation</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>RecordingToken := <emphasis role="italic">recordingToken</emphasis></para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetRecordingInformationResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      RecordingInformation.RecordingToken = <emphasis role="italic">recordingToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.Source
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.EarliestRecording =: <emphasis role="italic">T1</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.LatestRecording =: <emphasis role="italic">T2</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.Content
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.Track
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RecordingInformation.RecordingStatus
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client selects keep alive time value by following the procedure mentioned in <xref linkend="Annex_KeepAliveTimeoutValue"/> with the following output parameter
                <itemizedlist>
                  <listitem>
                    <para>out <emphasis role="italic">keepAliveTime</emphasis> – keep alive time</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">FindPTZPosition</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      StartPoint := <emphasis role="italic">T1</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      EndPoint := <emphasis role="italic">T2</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Scope.IncludedSources skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Scope.IncludedRecordings[0] := <emphasis role="italic">recordingToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Scope.RecordingInformationFilter skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      SearchFilter.MinPosition.PanTilt := [-1,-1]
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      SearchFilter.MaxPosition.PanTilt := [1, 1]
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      SearchFilter.EnterOrExit := false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaxMatches skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      KeepAliveTime := <emphasis role="italic">keepAliveTime</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">FindPTZPositionResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>SearchToken =: <emphasis role="italic">searchToken</emphasis></para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client waits during (<emphasis role="italic">keepAliveTime</emphasis> + <emphasis role="italic">timeout</emphasis>)
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetPTZPositionSearchResults</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SearchToken := <emphasis role="italic">searchToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MinResults skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaxResults skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      WaitTime := PT5S
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with SOAP 1.2 fault message (<emphasis role="bold">InvalidArgVal/InvalidToken</emphasis>).
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetRecordingInformationResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">FindPTZPositionResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send SOAP 1.2 fault message to <emphasis role="bold">GetPTZPositionSearchResults</emphasis>.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> Other faults than specified in the test are acceptable, though the specified are preferable.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> <emphasis role="italic">timeout</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
        </para>
      </section>
    </section>
    <!--Media Attributes-->
    <section xml:id="tc.search.media_attributes"
             xreflabel="Section 5.6">
      <title>Media Attributes</title>
      <!--SEARCH-7-1-1-->
      <section xml:id="tc.SEARCH-7-1-1">
        <title>
          GET MEDIA ATTRIBUTES – PTZ MEDIA ATTRIBUTES
        </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> SEARCH-7-1-1
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> GetMediaAttributes
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetMediaAttributes
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> search.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify PTZ Media Attributes.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> At least one recording exists on the DUT (see <xref linkend="Annex_RecordingEnvironmentPreRequisite"/> for more details). The recording shall contain PTZ metadata and that the matching PTZ search criterion is present in the recording.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Get token Token1 of recording which contains at least one track with PTZ position data from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetRecordingInformationRequest</emphasis> message (RecordingToken = "Token1") to retrieve information about Recording.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetRecordingInformationResponse</emphasis> message (RecordingInformation.RecordingToken = Token1, RecordingInformation.EarliestRecording = T1, RecordingInformation.LatestRecording = T2).
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">FindPTZPositionRequest</emphasis> message (StartPoint = T1, EndPoint = T2, Scope.IncludeRecordings = Token1, SearchFilter.MinPosition.PanTilt = [-1,-1], SearchFilter.MaxPosition.PanTilt = [1, 1], SearchFilter.EnterOrExit = ’False’, no MaxMatches, KeepAliveTime = keepAliveTimeout (see <xref linkend="Annex_KeepAliveTimeoutValue"/>)) to start PTZ positions search session and retrieve SearchToken.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">FindPTZPositionResponse</emphasis> message (SearchToken = "SearchToken1") from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetPTZPositionSearchResultsRequest</emphasis> message (SearchToken = "SearchToken1", WaitTime = PT5S) to get current search result and search state.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> message (SearchState = [CurrentSearchState], ResultList) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Repeat steps 8-9 until SearchState is equal to Completed or at least one Result was received.
              </para>
            </listitem>
            <listitem>
              <para>
                If SearchState after step 10 was not Completed, ONVIF Client will invoke EndSearchRequst message (SearchToken = "SearchToken1") to stop searching. Otherwise if Completed state was reached, but no Result was received, fail the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Select one of received Result and use it for other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client will invoke <emphasis role="bold">GetMediaAttributesRequest</emphasis> message (RecordingToken = "Token1", Time = Result.Time) to media attributes with PTZ media attributes.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify the <emphasis role="bold">GetMediaAttributesResponse</emphasis> message (RecordingToken = "Token1", TrackAttributes.MetadataAttributes.CanContainPTZ = true, TrackAttributes.MetadataAttributes.PtzSpaces, other media attributes) from the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                Verify that TrackAttributes.MetadataAttributes.CanContainPTZ is equal to true for the Track with TrackInformation.TrackToken = Result.TrackToken.
              </para>
            </listitem>
            <listitem>
              <para>
                If Prfile G is claimed as supported by the DUT, verify that TrackAttributes.MetadataAttributes.PtzSpaces for the Track with TrackInformation.TrackToken = Result.TrackToken contains PanTilt Position Generic namespace, if Result contains Position.PanTilt.
              </para>
            </listitem>
            <listitem>
              <para>
                If Prfile G is claimed as supported by the DUT, verify that TrackAttributes.MetadataAttributes.PtzSpaces for the Track with TrackInformation.TrackToken = Result.TrackToken contains Zoom Position Generic namespace, if Result contains Position.Zoom.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">
            PASS –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">
            FAIL –
          </emphasis>
        </para>
        <para>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetRecordingInformationResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">FindPTZPositionResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">EndSearchResponse</emphasis> message, if <emphasis role="bold">EndSearchRequest</emphasis> was invoked.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a valid <emphasis role="bold">GetMediaAttributesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a TrackAttributes.MetadataAttributes.CanContainPTZ is equal to true for the Track with TrackInformation.TrackToken = Result.TrackToken.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a TrackAttributes.MetadataAttributes.PtzSpaces for the Track with TrackInformation.TrackToken = Result.TrackToken contains PanTilt Position Generic namespace, if Result contains Position.PanTilt and Profile G is claimed as supported bu the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send a TrackAttributes.MetadataAttributes.PtzSpaces for the Track with TrackInformation.TrackToken = Result.TrackToken contains Zoom Position Generic namespace, if Result contains Position.Zoom and Profile G is claimed as supported bu the DUT.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.EarliestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then minimum value of Track.DataFrom will be used as T1.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If RecordingInformation.LatestRecording is not included in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, then maximum value of Track.DataTo will be used as T2.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> contains responses with Position.PanTilt out of requested range, ONVIF Device Test Tool will report it as warning.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The following Position Generic namespaces are defined for PanTilt and Zoom:
          <itemizedlist>
            <listitem>
              <para>
                http://www.onvif.org/ver10/tptz/PanTiltSpaces/PositionGenericSpace
              </para>
            </listitem>
            <listitem>
              <para>
                http://www.onvif.org/ver10/tptz/ZoomSpaces/PositionGenericSpace
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
    </section>
  </chapter>
  <appendix>
    <title>Helper Procedures and Additional Notes</title>
    <!--A.1-->
    <section xml:id="Annex_RecordingEnvironmentPreRequisite"
             xreflabel="Annex A.1">
      <title>Recording Environment Pre-Requisite</title>
      <para>
        The following pre-requisites shall have all fields filled in before executing tests for Replay Service:
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              At least one recording shall be present at the DUT and specified for test execution.
            </para>
          </listitem>
          <listitem>
            <para>
              The recording shall be stopped before executing tests.
            </para>
          </listitem>
          <listitem>
            <para>
              The recording shall contain at least one track each for video, audio (if Audio Recording is supported) and Metadata (if Metadata Recording is supported).
            </para>
          </listitem>
          <listitem>
            <para>
              The recording shall contain data at least in the video track, audio track (if Audio Recording is supported), and metadata track (if Metadata Recording is supported) and configuration of each track shall be consistent for the duration of the recording.
            </para>
          </listitem>
          <listitem>
            <para>
              The recording shall contain at least one gap.
            </para>
          </listitem>
          <listitem>
            <para>
              The recording span (including gap) should be not more than 3 minutes.
            </para>
          </listitem>
          <listitem>
            <para>
              Each recording event should be at least one minute for the recording.
            </para>
          </listitem>
        </orderedlist>
      </para>
    </section>
    <!--A.2-->
    <section xml:id="Annex_ComparisonRecordingList"
             xreflabel="Annex A.2">
      <title>
        Check list of Recordings from GetRecordingsResponse and list of recordings form GetRecordingSearchResultsResponses
      </title>
      <para>
        To check the list of Recordings from <emphasis role="bold">GetRecordingsResponse</emphasis> and the list of recordings from <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis>'s consistency the following steps will be done:
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              Verify that <emphasis role="bold">GetRecordingsResponse</emphasis> contains the same number of RecordingItem’s with the total number of RecordingInformation’s which were in <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis>'s. If number of recordings is different for these two cases, fail the check and skip the next steps.
            </para>
          </listitem>
          <listitem>
            <para>
              Verify that for each RecordingItem in <emphasis role="bold">GetRecordingsResponse</emphasis> message there is RecordingInformation item in one of the <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> messages with RecordingInformation.RecordingToken equal to RecordingItem.RecordingToken. If this verification does not pass, fail the check and skip the next steps.
            </para>
          </listitem>
          <listitem>
            <para>
              Verify that if RecordingInformation.RecordingToken is equal to RecordingItem.RecordingToken for RecordingItem from <emphasis role="bold">GetRecordingsResponse</emphasis> and for RecordingInformation in one of the <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis>'s the following statements are true:
              <orderedlist numeration="arabic"
                           inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    RecordingInformation.Source and RecordingItem.Source are equal to each other (e.g. have the same values for each field).
                  </para>
                </listitem>
                <listitem>
                  <para>
                    RecordingInformation.Content and RecordingItem.Content are equal to each other.
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        If one of the statements is not true, fail the check.
      </para>
    </section>
    <!--A.3-->
    <section xml:id="Annex_TotalNumberOfRecordings"
             xreflabel="Annex A.3">
      <title>Get Total Number of Recordings from the DUT</title>
      <para>
        The following procedure will be used to get the total number of recordings from the DUT:
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              Start an ONVIF Client.
            </para>
          </listitem>
          <listitem>
            <para>
              Start the DUT.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client will invoke <emphasis role="bold">GetRecordingSummaryRequest</emphasis> message to get the total number of recordings.
            </para>
          </listitem>
          <listitem>
            <para>
              Verify the <emphasis role="bold">GetRecordingSummaryResponse</emphasis> message (DataFrom, DataUntil, NumberRecordings) from the DUT.
            </para>
          </listitem>
          <listitem>
            <para>
              Summary.NumberRecordings value from <emphasis role="bold">GetRecordingSummaryResponse</emphasis> message will be assumed as the total number of Recordings on the DUT.
            </para>
          </listitem>
        </orderedlist>
      </para>
    </section>
    <!--A.4-->
    <section xml:id="Annex_ComparisonOfRecordingSearchResults"
             xreflabel="Annex A.4">
      <title>Check that DUT return same set of recordings for two search recording sessions</title>
      <para>
        To check that the list of Recordings from <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> messages for two search recording sessions contains the same set of Recordings the following steps will be done:
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              Verify that <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> messages for the first search recording session contain the same number of RecordingInformation items with <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> messages for the second search recording session. If the number of items is different for these two cases, fail the check and skip the next steps.
            </para>
          </listitem>
          <listitem>
            <para>
              Verify that for each result in <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> messages in the first search recording session, there is the same result in <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> messages in the second search recording session (e.g. result with the same RecordingToken). If this verification does not pass, fail the check and skip the next steps.
            </para>
          </listitem>
          <listitem>
            <para>
              Verify that the following statements are true if RecordingInformation.RecordingToken is equal for two RecordingInformation items from the first and the second search recording session:
              <orderedlist numeration="arabic"
                           inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    RecordingInformation.Source items are equal to each other (e.g. have the same values for each field).
                  </para>
                </listitem>
                <listitem>
                  <para>
                    RecordingInformation.EarliestRecording items are equal to each other or not included for both RecordingInformation items.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    RecordingInformation.LatestRecording items are equal to each other or not included for both RecordingInformation items.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    RecordingInformation.Content items are equal to each other.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    RecordingInformation.Track lists are equal to each other (see <xref linkend="Annex_CheckTracksForRecordingInformation"/>).
                  </para>
                </listitem>
                <listitem>
                  <para>
                    RecordingInformation.RecordingStatus items are equal to each other.
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        If one of the statements is not true, fail the check.
      </para>
    </section>
    <!--A.5-->
    <section xml:id="Annex_CheckTracksForRecordingInformation"
             xreflabel="Annex A.5">
      <title>Check that DUT return same set of tracks for two RecordingInformation items</title>
      <para>
        To check that the list of Track items for two RecordingInformation items contains the same set of Tracks the following steps will be done:
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              Verify that RecordingInformation items contain the same number of Track items. If the number of items is different, fail the check and skip the next steps.
            </para>
          </listitem>
          <listitem>
            <para>
              Verify that for each RecordingInformation.Track item in the first RecordingInformation item, there is the same Track item in the second RecordingInformation item (e.g. Track items with the same TrackToken). If this verification does not pass, fail the check and skip the next steps.
            </para>
          </listitem>
          <listitem>
            <para>
              Verify that the following statements are true if Track.TrackToken is equal for two Track items from the first and the second RecordingInformation item:
              <orderedlist numeration="arabic"
                           inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    Track.TrackType items are equal to each other.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Track.Description items are equal to each other.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Track.DataFrom items are equal to each other.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Track.DataTo items are equal to each other.
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        If one of statements is not true fail the check.
      </para>
    </section>
    <!--A.6-->
    <section xml:id="Annex_ComparisonOfEventSearchResults"
             xreflabel="Annex A.6">
      <title>Check that DUT return same set of event Results for two search event sessions</title>
      <para>
        To check that the list of Result items from <emphasis role="bold">GetEventSearchResultsResponse</emphasis> messages for two search event sessions contains the same set of Result items the following steps will be done:
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              Verify that <emphasis role="bold">GetEventSearchResultsResponse</emphasis> messages for the first search event session contain the same number of Result items with <emphasis role="bold">GetEventSearchResultsResponse</emphasis> messages for the second search event session. If the number of items is different for these two cases, fail the check and skip the next steps.
            </para>
          </listitem>
          <listitem>
            <para>
              Verify that for each Result item in <emphasis role="bold">GetEventSearchResultsResponse</emphasis> messages in the first search event session, there is the same Result item in <emphasis role="bold">GetEventSearchResultsResponse</emphasis> messages in the second search event session. If this verification does not pass, fail the check and skip the next steps.
            </para>
          </listitem>
          <listitem>
            <para>
              Verify that the following statements are true if two Result items are the same:
              <orderedlist numeration="arabic"
                           inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    Result.Event.SubscriptionReference items are equal to each other (e.g. have the same values for each field).
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Result.Event.ProducerReference items are equal to each other (e.g. have the same values for each field).
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Result.Event.Message items are equal to each other (e.g. have the same values for each field).
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Result.StartStateEvent items are equal to each other.
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        If one of the statements is not true, fail the check.
      </para>
      <para>
        <emphasis role="bold">Note:</emphasis> Two Event Results will be assumed as the same, if they have the same values for GetEventSearchResultsResponse.ResultList.Result.RecordingToken, GetEventSearchResultsResponse.ResultList.Result.TrackToken, GetEventSearchResultsResponse.ResultList.Result.Time, GetEventSearchResultsResponse.ResultList.Result.Event.Topic and fields and values of GetEventSearchResultsResponse.ResultList.Result.Event.Message.Data.
      </para>
    </section>
    <!--A.7-->
    <section xml:id="Annex_ComparisonOfMetadataSearchResults"
             xreflabel="Annex A.7">
      <title>Check that DUT returns the same set of metadata Results for two search metadata sessions</title>
      <para>
        To check that the list of Result items from <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> messages for two search metadata sessions contains the same set of Result items the following steps will be done:
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              Verify that <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> messages for the first search metadata session contain the same number of Result items with <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> messages for the second search metadata session. If the number of items is different for these two cases, fail the check and skip the next steps.
            </para>
          </listitem>
          <listitem>
            <para>
              Verify that for each Result item in <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> messages in the first search metadata session, there is the same Result item in <emphasis role="bold">GetMetadataSearchResultsResponse</emphasis> messages in the second search metadata session. If this verification does not pass, fail the check and skip the next steps.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Note:</emphasis> two Metadata Results will be assumed as the same, if they have the same values for: GetMetadataSearchResultsResponse.ResultList.Result.RecordingToken, GetMetadataSearchResultsResponse.ResultList.Result.TrackToken, GetMetadataSearchResultsResponse.ResultList.Result.Time
      </para>
    </section>
    <!--A.8-->
    <section xml:id="Annex_ComparisonOfPtzSearchResults"
             xreflabel="Annex A.8">
      <title>Check that DUT returns the same set of PTZ Position Results for two search PTZ position sessions</title>
      <para>
        To check that the list of Result items from <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> messages for two search PTZ Position sessions contains the same set of Result items the following steps will be done:
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              Verify that <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> messages for the first search PTZ Position session contain the same number of Result items with <emphasis role="bold">GetPTZPositionSearchResultsResponse</emphasis> messages for the second search PTZ Position session. If the number of items is different for these two cases, fail the check and skip the next steps.
            </para>
          </listitem>
          <listitem>
            <para>
              Verify that for each Result item in Get PTZPositionSearchResultsResponse messages in the first search PTZ Position session, there is the same Result item in Get PTZPositionSearchResultsResponse messages in the second search PTZ Position session. If this verification does not pass, fail the check and skip the next steps.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Note:</emphasis> Two PTZ Position Results will be assumed as the same, if they have the same values for: GetPTZPositionSearchResultsResponse.ResultList.Result.RecordingToken, GetPTZPositionSearchResultsResponse.ResultList.Result.TrackToken, GetPTZPositionSearchResultsResponse.ResultList.Result.Time, GetPTZPositionSearchResultsResponse.ResultList.Result.Pozition.
      </para>
    </section>
    <!--A.9-->
    <section xml:id="Annex_RecordingInformationConsistencyCheck"
             xreflabel="Annex A.9">
      <title>
        Check GetRecordingInformationResponse.RecordingInformation and GetRecordingSearchResultsResponse.ResultList.RecordingInformation consistency
      </title>
      <para>
        To check the RecordingInformation structure consistency from <emphasis role="bold">GetRecordingInformationResponse</emphasis> and from <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> ONVIF Client will compare GetRecordingInformationResponse.RecordingInformation structure with GetRecordingSearchResultsResponse.ResultList.RecordingInformation stucture for corresponding RecordingToken. The following steps will be done:
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              Verify that GetRecordingInformationResponse.RecordingInformation.Source.SourceID equals to GetRecordingSearchResultsResponse.ResultList.RecordingInformation.Source.SourceID.
            </para>
          </listitem>
          <listitem>
            <para>
              Verify that GetRecordingInformationResponse.RecordingInformation.Source.Name equals to GetRecordingSearchResultsResponse.ResultList.RecordingInformation.Source.Name.
            </para>
          </listitem>
          <listitem>
            <para>
              Verify that GetRecordingInformationResponse.RecordingInformation.Source.Location equals to GetRecordingSearchResultsResponse.ResultList.RecordingInformation.Source.Location.
            </para>
          </listitem>
          <listitem>
            <para>
              Verify that GetRecordingInformationResponse.RecordingInformation.Source.Description equals to GetRecordingSearchResultsResponse.ResultList.RecordingInformation.Source.Description.
            </para>
          </listitem>
          <listitem>
            <para>
              Verify that GetRecordingInformationResponse.RecordingInformation.Source. Address equals to GetRecordingSearchResultsResponse.ResultList.RecordingInformation.Source.Address.
            </para>
          </listitem>
          <listitem>
            <para>
              Verify that if RecordingInformation.EarliestRecording is skipped in <emphasis role="bold">GetRecordingInformationResponse</emphasis>, then ResultList.RecordingInformation.EarliestRecording is skipped in <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis>.
            </para>
          </listitem>
          <listitem>
            <para>
              If RecordingInformation.EarliestRecording is not skipped in <emphasis role="bold">GetRecordingInformationResponse</emphasis>, then verify that GetRecordingInformationResponse.EarliestRecording equals to GetRecordingSearchResultsResponse.ResultList.RecordingInformation.EarliestRecording.
            </para>
          </listitem>
          <listitem>
            <para>
              Verify that if RecordingInformation.LatestRecording is skipped in <emphasis role="bold">GetRecordingInformationResponse</emphasis>, then ResultList.RecordingInformation.LatestRecording is skipped in <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis>.
            </para>
          </listitem>
          <listitem>
            <para>
              If RecordingInformation.LatestRecording is not skipped in <emphasis role="bold">GetRecordingInformationResponse</emphasis>, then verify that GetRecordingInformationResponse.LatestRecording equals to GetRecordingSearchResultsResponse.ResultList.RecordingInformation.EarliestRecording.
            </para>
          </listitem>
          <listitem>
            <para>
              Verify that GetRecordingInformationResponse.RecordingInformation.Content equals to GetRecordingSearchResultsResponse.ResultList.RecordingInformation.Content.
            </para>
          </listitem>
          <listitem>
            <para>
              Verify that GetRecordingInformationResponse.RecordingInformation contains the same number of Tracks with number of Tracks from GetRecordingSearchResultsResponse.ResultList.RecordingInformation item. If number of tracks is different for these two cases, fail the check and skip the next steps.
            </para>
          </listitem>
          <listitem>
            <para>
              Verify that for each RecordingInformation.Track.TrackToken in <emphasis role="bold">GetRecordingInformationResponse</emphasis> message, there is RecordingInformation.Track item in the <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis> messages with TrackToken equal to RecordingInformation.Track.TrackToken. If this verification does not pass, fail the check and skip the next steps.
            </para>
          </listitem>
          <listitem>
            <para>
              Verify that if RecordingInformation.Track.TrackToken from <emphasis role="bold">GetRecordingInformationResponse</emphasis> is equal to RecordingInformation.Track.TrackToken in <emphasis role="bold">GetRecordingSearchResultsResponse</emphasis>, the following statements are true:
              <orderedlist numeration="arabic"
                           inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    RecordingInformationTrack.TrackType and RecordingInformation.Track.TrackType are equal to each other.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    RecordingInformationTrack.Description and RecordingInformation.Track.Description are equal to each other.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    RecordingInformationTrack.DataFrom and RecordingInformation.Track.DataFrom are equal to each other.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    RecordingInformationTrack.DataTo and RecordingInformation.Track.DataTo are equal to each other.
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              Verify that GetRecordingInformationResponse.RecordingInformation.RecordingStatus equals to GetRecordingSearchResultsResponse.ResultList.RecordingInformation.RecordingStatus.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        If one of the statements is not true, fail the check.
      </para>
    </section>
    <!--A.10-->
    <section xml:id="Annex_KeepAliveTimeoutValue"
             xreflabel="Annex A.10">
      <title>Keep Alive Timeout Value</title>
      <para>
        Keep Alive Timeout Value (<emphasis role="italic">keepAliveTimeout</emphasis>) will be taken as maximum value between 10 seconds and <emphasis role="italic">timeBetweenRequests</emphasis> + 3 second (where <emphasis role="italic">timeBetweenRequests</emphasis> is Time Between Requests field of ONVIF Device Test Tool). The <emphasis role="italic">keepAliveTimeout</emphasis> shall be in xs:duration format.
      </para>
    </section>
  </appendix>
</book>